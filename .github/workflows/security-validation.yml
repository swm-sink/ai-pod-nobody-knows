name: Security Validation & Quality Checks

from config.voice_config import get_production_voice_id

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security audit daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  # Non-sensitive environment variables only
  NODE_ENV: production

jobs:
  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit & Secret Scanning

    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Dependencies
      run: |
        if [ -f package.json ]; then
          npm ci --only=production
        fi

    - name: GitLeaks Secret Scanning
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: TruffleHog Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

    - name: Validate Environment Configuration
      run: |
        # Check .env.example exists and has required keys
        if [ ! -f .env.example ]; then
          echo "ERROR: .env.example file missing"
          exit 1
        fi

        # Validate critical environment variables are documented
        required_keys=("ELEVENLABS_API_KEY" "PERPLEXITY_API_KEY" "PRODUCTION_VOICE_ID")
        for key in "${required_keys[@]}"; do
          if ! grep -q "^$key=" .env.example; then
            echo "ERROR: Required key $key missing from .env.example"
            exit 1
          fi
        done

        echo "✅ Environment configuration validation passed"

    - name: Documentation Security Check
      run: |
        # Check for accidentally committed secrets in documentation
        if grep -r -i "pplx-[a-zA-Z0-9]" --exclude-dir=.git --include="*.md" .; then
          echo "ERROR: Perplexity API key found in documentation"
          exit 1
        fi

        if grep -r -i "sk-ant-[a-zA-Z0-9]" --exclude-dir=.git --include="*.md" .; then
          echo "ERROR: Anthropic API key found in documentation"
          exit 1
        fi

        if grep -r -i "ghp_[a-zA-Z0-9]" --exclude-dir=.git --include="*.md" .; then
          echo "ERROR: GitHub PAT found in documentation"
          exit 1
        fi

        echo "✅ Documentation security check passed"

  quality-validation:
    runs-on: ubuntu-latest
    name: Code Quality & Structure Validation

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Validate Project Structure
      run: |
        # Check critical files exist
        critical_files=("CLAUDE.md" ".env.example" ".gitignore" "README.md")
        for file in "${critical_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "ERROR: Critical file $file missing"
            exit 1
          fi
        done

        # Check .claude directory structure
        if [ ! -d ".claude" ]; then
          echo "ERROR: .claude directory missing"
          exit 1
        fi

        echo "✅ Project structure validation passed"

    - name: Validate CLAUDE.md Optimization
      run: |
        # Check for Claude 4 optimization markers
        if ! grep -q "CLAUDE 4 OPTIMIZED" CLAUDE.md; then
          echo "WARNING: CLAUDE.md may not be optimized for Claude 4"
        fi

        # Check for token budget directives
        if ! grep -q "token_budget" CLAUDE.md; then
          echo "WARNING: Token budget directives may be missing"
        fi

        # Check for selective loading patterns
        if ! grep -q "MANDATORY_CONTEXT" CLAUDE.md; then
          echo "WARNING: Selective loading patterns may be missing"
        fi

        echo "✅ CLAUDE.md optimization validation passed"

    - name: Validate Context Management
      run: |
        # Check context file count (should be <= 15)
        context_count=$(find .claude/context -name "*.md" 2>/dev/null | wc -l)
        if [ "$context_count" -gt 15 ]; then
          echo "ERROR: Context sprawl detected - $context_count files (max 15)"
          exit 1
        fi

        # Check for agent-context directory
        if [ ! -d ".claude/agent-context" ]; then
          echo "ERROR: agent-context directory missing"
          exit 1
        fi

        echo "✅ Context management validation passed"

  dependency-audit:
    runs-on: ubuntu-latest
    name: Dependency Security Audit

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Audit Dependencies
      run: |
        if [ -f package.json ]; then
          # Run npm audit
          npm audit --audit-level=high

          # Check for deprecated packages
          npm outdated --depth=0 || true

          echo "✅ Dependency audit completed"
        else
          echo "⚠️ No package.json found - skipping dependency audit"
        fi

  production-readiness:
    runs-on: ubuntu-latest
    name: Production Readiness Check
    needs: [security-audit, quality-validation, dependency-audit]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Production Configuration Check
      run: |
        # Check production voice ID is protected
        if grep -q get_production_voice_id() .env.example; then
          echo "✅ Production voice ID properly configured"
        else
          echo "ERROR: Production voice ID missing or incorrect"
          exit 1
        fi

        # Check cost controls are in place
        if grep -q "MAX_COST_PER_EPISODE" .env.example; then
          echo "✅ Cost controls configured"
        else
          echo "WARNING: Cost controls may be missing"
        fi

        echo "✅ Production readiness validation passed"

    - name: Generate Security Report
      run: |
        echo "## Security Validation Report" > security-report.md
        echo "Generated: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "### Status: ✅ PASSED" >> security-report.md
        echo "- Secret scanning: Completed" >> security-report.md
        echo "- Environment validation: Passed" >> security-report.md
        echo "- Documentation security: Verified" >> security-report.md
        echo "- Project structure: Valid" >> security-report.md
        echo "- Context management: Optimized" >> security-report.md
        echo "- Production readiness: Confirmed" >> security-report.md

    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 30
