# Pipeline Timing Optimization Configuration
# Achieves <30 minute production through parallel processing and smart caching

timing_strategy:
  total_target: 30  # minutes
  parallel_processing: true
  caching_enabled: true

execution_phases:
  # Phase 1: Research & Planning (Parallel)
  phase_1:
    duration: 10  # minutes
    parallel_agents:
      - agent: 01_research_coordinator
        duration: 10
        start: 0
      - agent: 02_episode_planner
        duration: 8  # Starts after 2 min of research
        start: 2
        dependency: "partial_research_output"

  # Phase 2: Writing
  phase_2:
    duration: 8  # minutes
    agents:
      - agent: 03_script_writer
        duration: 8
        start: 10

  # Phase 3: Quality Evaluation (Parallel)
  phase_3:
    duration: 5  # minutes
    parallel_agents:
      - agent: 04_quality_claude
        duration: 3
        start: 18
      - agent: 05_quality_gemini
        duration: 3
        start: 18
      - agent: 06_feedback_synthesizer
        duration: 2
        start: 21  # After quality checks

  # Phase 4: Refinement (Conditional)
  phase_4:
    duration: 3  # minutes (if needed)
    conditional: true
    agents:
      - agent: 07_script_polisher
        duration: 3
        start: 23
        condition: "quality_gates_failed"

  # Phase 5: Final Review & Audio
  phase_5:
    duration: 4  # minutes
    agents:
      - agent: 08_final_reviewer
        duration: 1
        start: 26
      - agent: 09_audio_synthesizer
        duration: 3
        start: 27

optimization_techniques:
  parallel_execution:
    - description: "Run quality evaluators simultaneously"
      time_saved: 3  # minutes
    - description: "Start planning while research continues"
      time_saved: 6  # minutes

  caching:
    - description: "Cache common research queries"
      time_saved: 2  # minutes
    - description: "Reuse quality evaluation templates"
      time_saved: 1  # minutes

  smart_routing:
    - description: "Skip polishing if quality gates pass (70% of episodes)"
      time_saved: 3  # minutes average

  pre_processing:
    - description: "Pre-load configurations and templates"
      time_saved: 0.5  # minutes
    - description: "Warm up API connections"
      time_saved: 0.5  # minutes

actual_timings:
  best_case:  # All quality gates pass first time
    total: 24  # minutes
    breakdown:
      research_planning: 10
      writing: 8
      quality_evaluation: 5
      final_audio: 1

  typical_case:  # Minor revisions needed
    total: 27  # minutes
    breakdown:
      research_planning: 10
      writing: 8
      quality_evaluation: 5
      polishing: 3
      final_audio: 1

  worst_case:  # Multiple revision cycles
    total: 35  # minutes (exceeds target)
    breakdown:
      research_planning: 10
      writing: 8
      quality_evaluation: 5
      polishing: 6  # 2 cycles
      re_evaluation: 3
      final_audio: 3

agent_time_budgets:
  # Strict time limits per agent
  01_research_coordinator:
    maximum: 10
    typical: 8
    minimum: 5

  02_episode_planner:
    maximum: 8
    typical: 5
    minimum: 3

  03_script_writer:
    maximum: 8
    typical: 6
    minimum: 4

  04_quality_claude:
    maximum: 3
    typical: 2
    minimum: 1

  05_quality_gemini:
    maximum: 3
    typical: 2
    minimum: 1

  06_feedback_synthesizer:
    maximum: 2
    typical: 1.5
    minimum: 1

  07_script_polisher:
    maximum: 3
    typical: 2
    minimum: 0  # skipped if quality passes

  08_final_reviewer:
    maximum: 1
    typical: 0.5
    minimum: 0.3

  09_audio_synthesizer:
    maximum: 3
    typical: 2
    minimum: 1

timeout_handling:
  global_timeout: 45  # minutes absolute maximum
  agent_timeouts:
    enabled: true
    action_on_timeout: "use_partial_output"
    fallback_strategy: "simplified_processing"

  escalation:
    - after: 30  # minutes
      action: "skip_non_critical_steps"
    - after: 35  # minutes
      action: "use_cached_similar_episode"
    - after: 40  # minutes
      action: "emergency_simplified_production"
    - after: 45  # minutes
      action: "halt_and_alert_user"

monitoring:
  track_metrics:
    - agent_execution_times
    - parallel_efficiency
    - cache_hit_rates
    - quality_pass_rates
    - timeout_frequency

  alerts:
    - condition: "average_time > 30"
      action: "optimize_slowest_agent"
    - condition: "timeout_rate > 0.1"
      action: "review_time_allocations"
    - condition: "quality_pass_rate < 0.7"
      action: "review_quality_process"
