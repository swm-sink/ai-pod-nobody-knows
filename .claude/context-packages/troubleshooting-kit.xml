<?xml version="1.0" encoding="UTF-8"?>
<document type="context-package" domain="troubleshooting" version="1.0" xmlns="https://ai-podcasts-nobody-knows.com/claude-docs">
    <metadata>
        <title>Troubleshooting Kit Context Package</title>
        <purpose>Complete diagnostic and resolution toolkit for all system issues</purpose>
        <claude-optimization>true</claude-optimization>
        <completeness>100% - No external references required</completeness>
        <target-tokens>5000-7000</target-tokens>
        <usage>Load via @troubleshooting-kit for any system problems or errors</usage>
    </metadata>

    <content>
        <!-- EMBEDDED DIAGNOSTIC PROCEDURES -->
        <section type="diagnostics" id="system-diagnostics">
            <technical-explanation>
                Systematic diagnostic procedures using scientific troubleshooting methodology: observe, hypothesize, test, analyze, resolve. Each diagnostic path includes specific commands, expected outputs, and decision trees for efficient problem resolution.
            </technical-explanation>
            <simple-explanation>
                Like being a detective solving a mystery - you look for clues, form theories about what went wrong, test your theories, and fix the problem step by step.
            </simple-explanation>

            <diagnostic-categories>
                <category name="Context Loading Issues">
                    <symptoms>@ references not working, missing contexts, auto-loading problems</symptoms>
                    <diagnostic-commands>
                        <command>ls .claude/context-packages/</command>
                        <command>grep -r "@" .claude/</command>
                        <command>wc -l CLAUDE.md .claude/NAVIGATION.md</command>
                    </diagnostic-commands>
                    <common-causes>
                        <cause>.claudeignore blocking needed files</cause>
                        <cause>Missing context package files</cause>
                        <cause>Broken @ reference syntax</cause>
                    </common-causes>
                </category>

                <category name="API Integration Failures">
                    <symptoms>ElevenLabs errors, MCP connection issues, authentication failures</symptoms>
                    <diagnostic-commands>
                        <command>echo $ELEVENLABS_API_KEY | wc -c</command>
                        <command>claude mcp list</command>
                        <command>curl -H "xi-api-key: $ELEVENLABS_API_KEY" https://api.elevenlabs.io/v1/user</command>
                    </diagnostic-commands>
                    <common-causes>
                        <cause>Missing or expired API keys</cause>
                        <cause>MCP servers not configured</cause>
                        <cause>Network connectivity issues</cause>
                        <cause>API rate limiting</cause>
                    </common-causes>
                </category>

                <category name="Production Pipeline Failures">
                    <symptoms>Agent errors, quality threshold failures, incomplete episodes</symptoms>
                    <diagnostic-commands>
                        <command>find .claude/level-2-production/sessions/ -name "*.json" | tail -5</command>
                        <command>grep "error\|failed" .claude/level-2-production/sessions/*/</command>
                        <command>ls -la projects/nobody-knows/output/</command>
                    </diagnostic-commands>
                    <common-causes>
                        <cause>Quality thresholds too restrictive</cause>
                        <cause>Insufficient research data</cause>
                        <cause>Cost limits exceeded</cause>
                        <cause>TTS synthesis errors</cause>
                    </common-causes>
                </category>

                <category name="Performance Issues">
                    <symptoms>Slow responses, high token usage, context overflow</symptoms>
                    <diagnostic-commands>
                        <command>find .claude -type f | wc -l</command>
                        <command>find .claude -name "*.xml" -exec wc -l {} + | tail -1</command>
                        <command>grep -r "Technical:\|Simple:" .claude/ | wc -l</command>
                    </diagnostic-commands>
                    <common-causes>
                        <cause>Too many files auto-loading</cause>
                        <cause>Context packages too large</cause>
                        <cause>Inefficient @ reference patterns</cause>
                    </common-causes>
                </category>
            </diagnostic-categories>
        </section>

        <!-- EMBEDDED RESOLUTION PROCEDURES -->
        <section type="resolutions" id="resolution-procedures">
            <technical-explanation>
                Step-by-step resolution procedures with validation checkpoints and rollback instructions. Each procedure includes prerequisites, execution steps, validation commands, and success criteria for reliable problem resolution.
            </technical-explanation>
            <simple-explanation>
                Exact instructions for fixing each type of problem, like having a repair manual that tells you exactly which screws to turn and how to test if it worked.
            </simple-explanation>

            <resolution-procedures>
                <procedure name="Fix Context Loading Issues">
                    <prerequisites>Identify specific @ reference that's failing</prerequisites>
                    <steps>
                        <step number="1">
                            <action>Check .claudeignore file</action>
                            <command>cat .claudeignore | grep -E "context|packages"</command>
                            <validation>Ensure context-packages/ is not excluded</validation>
                        </step>
                        <step number="2">
                            <action>Verify context package exists</action>
                            <command>ls -la .claude/context-packages/[package-name].xml</command>
                            <validation>File exists and is readable</validation>
                        </step>
                        <step number="3">
                            <action>Test @ reference syntax</action>
                            <command>Try loading the specific @ reference</command>
                            <validation>Context loads without errors</validation>
                        </step>
                    </steps>
                    <success-criteria>@ reference loads complete context successfully</success-criteria>
                </procedure>

                <procedure name="Fix API Integration">
                    <prerequisites>Identify which API is failing</prerequisites>
                    <steps>
                        <step number="1">
                            <action>Verify API key is set</action>
                            <command>echo $[API_KEY_NAME] | head -c 20</command>
                            <validation>Key exists and starts correctly</validation>
                        </step>
                        <step number="2">
                            <action>Test API connectivity</action>
                            <command>Use appropriate API test command</command>
                            <validation>Receives successful response</validation>
                        </step>
                        <step number="3">
                            <action>Check MCP server status</action>
                            <command>claude mcp list | grep [server-name]</command>
                            <validation>Server shows as available</validation>
                        </step>
                    </steps>
                    <success-criteria>API calls succeed and return expected data</success-criteria>
                </procedure>

                <procedure name="Fix Production Pipeline">
                    <prerequisites>Identify which stage is failing</prerequisites>
                    <steps>
                        <step number="1">
                            <action>Review session logs</action>
                            <command>cat .claude/level-2-production/sessions/[session]/[step].json</command>
                            <validation>Identify specific error or failure point</validation>
                        </step>
                        <step number="2">
                            <action>Check quality thresholds</action>
                            <command>grep "threshold" .claude/level-2-production/config/quality_gates.yaml</command>
                            <validation>Thresholds are reasonable and achievable</validation>
                        </step>
                        <step number="3">
                            <action>Retry with adjustments</action>
                            <command>Run production step with modified parameters</command>
                            <validation>Step completes successfully</validation>
                        </step>
                    </steps>
                    <success-criteria>Production pipeline completes end-to-end</success-criteria>
                </procedure>

                <procedure name="Optimize Performance">
                    <prerequisites>Identify performance bottleneck</prerequisites>
                    <steps>
                        <step number="1">
                            <action>Audit auto-loading</action>
                            <command>Check what files are loading automatically</command>
                            <validation>Only essential files auto-load</validation>
                        </step>
                        <step number="2">
                            <action>Optimize context packages</action>
                            <command>Review context package sizes and usage</command>
                            <validation>Packages are focused and efficient</validation>
                        </step>
                        <step number="3">
                            <action>Use /clear frequently</action>
                            <command>/clear to reset context periodically</command>
                            <validation>Maintains responsive performance</validation>
                        </step>
                    </steps>
                    <success-criteria>System responds quickly with efficient token usage</success-criteria>
                </procedure>
            </resolution-procedures>
        </section>

        <!-- EMBEDDED COMMON ERROR PATTERNS -->
        <section type="errors" id="common-errors">
            <technical-explanation>
                Catalog of frequently encountered error patterns with specific symptoms, root causes, and proven resolution methods. Each error entry includes the exact error message pattern, diagnostic approach, and step-by-step fix procedure.
            </technical-explanation>
            <simple-explanation>
                A collection of the most common things that go wrong and exactly how to fix them - like a FAQ for problems.
            </simple-explanation>

            <error-patterns>
                <error>
                    <message>"fatal: pathspec 'file.xml' did not match any files"</message>
                    <cause>Git staging issue - file doesn't exist or wrong path</cause>
                    <diagnosis>Check if file exists: ls -la [path]</diagnosis>
                    <resolution>
                        1. Verify file exists
                        2. Use correct path
                        3. git add . if multiple files
                    </resolution>
                </error>

                <error>
                    <message>"Error: Request timeout" (ElevenLabs)</message>
                    <cause>Text too long or API overloaded</cause>
                    <diagnosis>Check text length and API status</diagnosis>
                    <resolution>
                        1. Split text into smaller chunks
                        2. Retry with exponential backoff
                        3. Verify API key and credits
                    </resolution>
                </error>

                <error>
                    <message>"Quality threshold not met: comprehension=0.78"</message>
                    <cause>Script too complex or unclear for target audience</cause>
                    <diagnosis>Review script for complexity indicators</diagnosis>
                    <resolution>
                        1. Simplify language and concepts
                        2. Add more explanatory content
                        3. Adjust quality threshold if appropriate
                    </resolution>
                </error>

                <error>
                    <message>"Context window exceeded"</message>
                    <cause>Too much content loaded simultaneously</cause>
                    <diagnosis>Check current context size</diagnosis>
                    <resolution>
                        1. Use /clear to reset context
                        2. Load smaller context packages
                        3. Break operation into smaller steps
                    </resolution>
                </error>

                <error>
                    <message>"@ reference not found"</message>
                    <cause>Missing context package or incorrect path</cause>
                    <diagnosis>Check if target file exists</diagnosis>
                    <resolution>
                        1. Verify context package exists
                        2. Check @ reference syntax
                        3. Ensure .claudeignore doesn't block it
                    </resolution>
                </error>
            </error-patterns>
        </section>

        <!-- EMBEDDED PREVENTION STRATEGIES -->
        <section type="prevention" id="error-prevention">
            <technical-explanation>
                Proactive measures to prevent common issues through systematic validation, monitoring, and maintenance procedures. Prevention strategies focus on early detection and automated checks.
            </technical-explanation>
            <simple-explanation>
                Ways to stop problems before they happen - like regular car maintenance instead of waiting for breakdowns.
            </simple-explanation>

            <prevention-strategies>
                <strategy name="Regular System Health Checks">
                    <frequency>Weekly</frequency>
                    <commands>
                        <command>find .claude -name "*.xml" | xargs grep -l "broken\|error"</command>
                        <command>git status --porcelain | wc -l</command>
                        <command>ls .claude/context-packages/ | wc -l</command>
                    </commands>
                    <purpose>Detect issues before they cause failures</purpose>
                </strategy>

                <strategy name="API Health Monitoring">
                    <frequency>Before each production run</frequency>
                    <commands>
                        <command>Test ElevenLabs API connection</command>
                        <command>Verify MCP server availability</command>
                        <command>Check API credit balances</command>
                    </commands>
                    <purpose>Ensure external dependencies are functional</purpose>
                </strategy>

                <strategy name="Context Package Validation">
                    <frequency>After any context changes</frequency>
                    <commands>
                        <command>Test all @ references load correctly</command>
                        <command>Verify educational format compliance</command>
                        <command>Check token usage is within targets</command>
                    </commands>
                    <purpose>Maintain context system integrity</purpose>
                </strategy>

                <strategy name="Quality Threshold Monitoring">
                    <frequency>After each episode production</frequency>
                    <commands>
                        <command>Review quality scores and trends</command>
                        <command>Adjust thresholds if consistently too high/low</command>
                        <command>Monitor cost per episode trends</command>
                    </commands>
                    <purpose>Maintain production quality and efficiency</purpose>
                </strategy>
            </prevention-strategies>
        </section>

        <!-- EMBEDDED ESCALATION PROCEDURES -->
        <section type="escalation" id="escalation-procedures">
            <technical-explanation>
                When standard troubleshooting fails, escalation procedures provide systematic approaches for complex issues, including data collection, documentation requirements, and decision criteria for different escalation paths.
            </technical-explanation>
            <simple-explanation>
                When the usual fixes don't work, these are the bigger guns - more advanced techniques and when to ask for help.
            </simple-explanation>

            <escalation-levels>
                <level name="Advanced Troubleshooting">
                    <trigger>Standard procedures fail after 2 attempts</trigger>
                    <actions>
                        <action>Enable debug logging</action>
                        <action>Run comprehensive system diagnostics</action>
                        <action>Review all recent changes</action>
                        <action>Test with minimal configuration</action>
                    </actions>
                    <duration>2-4 hours maximum</duration>
                </level>

                <level name="System Restore">
                    <trigger>Advanced troubleshooting fails to resolve</trigger>
                    <actions>
                        <action>Identify last known good state</action>
                        <action>Use git to revert to stable commit</action>
                        <action>Restore from backup if available</action>
                        <action>Rebuild system incrementally</action>
                    </actions>
                    <duration>4-8 hours maximum</duration>
                </level>

                <level name="Architecture Review">
                    <trigger>Systemic issues or repeated failures</trigger>
                    <actions>
                        <action>Document all failure patterns</action>
                        <action>Review system architecture decisions</action>
                        <action>Consider fundamental design changes</action>
                        <action>Plan migration to improved architecture</action>
                    </actions>
                    <duration>1-2 days for planning</duration>
                </level>
            </escalation-levels>
        </section>
    </content>
</document>
