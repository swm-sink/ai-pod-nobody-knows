<?xml version="1.0" encoding="UTF-8"?>
<documentation xmlns="http://schema.claude.ai/documentation"
               type="folder-organization"
               version="1.0">
  <metadata>
    <title>.claude Folder Organization Guide</title>
  </metadata>

  <structure-overview>
    <directory-tree>
.claude/
├── FOLDER_STRUCTURE.xml       # This file - explains organization
├── NAVIGATION_INDEX.xml       # Master navigation guide
├── README.md                  # .claude directory overview
├── 00_GLOBAL_CONSTANTS.xml    # Project-wide constants
├── CLAUDE.local.md            # Local settings documentation
├── settings.local.json        # User-specific Claude Code settings
├── .claudeignore              # Files to exclude from context
│
├── shared/                    # Resources used across ALL levels
│   ├── brand/                 # Brand voice, guidelines
│   │   └── brand_voice.md
│   ├── quality-gates/         # Quality thresholds, metrics
│   │   ├── FILE_REFERENCE_VALIDATION.md
│   │   ├── VALIDATION_CHECKLIST.md
│   │   └── WORKFLOW_TEST_REPORT.md
│   └── templates/             # Reusable templates
│       └── episode_structure.md
│
├── context/                   # Documentation &amp; learning guides (ALL levels)
│   ├── foundation/            # Project basics (6 files)
│   │   ├── 00_project_constants.md
│   │   ├── 01_project_overview.md
│   │   ├── 02_walk_crawl_run_phases.md
│   │   ├── 03_hobbyist_focus.md
│   │   ├── 04_no_api_keys_activities.md
│   │   ├── 05_learning_milestones.md
│   │   └── NAVIGATION.md
│   │
│   ├── ai-orchestration/      # AI concepts (3 files)
│   │   ├── 01_agent_orchestration_basics.md
│   │   ├── 02_cost_optimization_strategies.md
│   │   └── NAVIGATION.md
│   │
│   ├── claude-code/           # Claude Code features (13 files + cookbook)
│   │   ├── 00_claude_code_constants.md
│   │   ├── 15_claude_code_introduction.md through 25_thinking_modes_optimization.md
│   │   ├── agents-cookbook/   # Agent examples
│   │   └── NAVIGATION.md
│   │
│   ├── operations/            # Operational guides (5 files)
│   │   ├── 00_operations_constants.md
│   │   ├── 01_troubleshooting_guide.md
│   │   ├── 02_quick_reference.md
│   │   ├── 03_production_checklist.md
│   │   └── NAVIGATION.md
│   │
│   ├── quality/               # Quality requirements (6 files)
│   │   ├── 00_quality_constants.md
│   │   ├── 01_change_approval_requirements.md
│   │   ├── 02_hallucination_prevention_guide.md
│   │   ├── 03_tdd_requirements_specification.md
│   │   ├── 04_validation_workflow.md
│   │   ├── TDD_ENFORCEMENT.md
│   │   └── NAVIGATION.md
│   │
│   ├── elevenlabs/            # ElevenLabs integration (12 files)
│   │   ├── 00_elevenlabs_constants.md
│   │   ├── 15_elevenlabs_overview.md through 24_elevenlabs_troubleshooting.md
│   │   ├── README.md
│   │   └── NAVIGATION.md
│   │
│   ├── prompts_research/      # Prompt engineering research (10 files)
│   │   ├── 15_podcast_prompt_engineering.md through 23_comprehensive_context_roadmap.md
│   │   └── NAVIGATION.md
│   │
│   └── README.md              # Context directory overview
│
├── level-1-dev/               # Development Platform (builds the builders)
│   ├── agents/                # Agents that help development
│   │   ├── test-agent.md
│   │   └── file-validator.md
│   ├── commands/              # Commands for building tools
│   │   ├── agent-builder-dev.md
│   │   ├── command-builder-dev.md
│   │   ├── context-researcher-dev.md
│   │   ├── session-manager.md
│   │   ├── test-workflow.md
│   │   └── validate-project-structure.md
│   ├── sessions/              # Development work tracking
│   │   ├── development-session-template.json
│   │   └── test_session_20250811_1430.json
│   ├── templates/             # Templates for builders
│   │   ├── agent-template.yaml
│   │   └── command-template.yaml
│   ├── workflows/             # Development workflows
│   │   ├── core-workflows.md
│   │   ├── developer-experience.md
│   │   ├── level-1-overview.md
│   │   ├── quality-integration.md
│   │   └── README.md
│   ├── quality/               # Development quality checks
│   │   └── validation-checklist.md
│   ├── test-agent-builder.md
│   ├── test-command-builder.md
│   └── test-context-researcher.md
│
├── level-2-production/        # Podcast Production System
│   ├── agents/                # Production agents (research, script, etc.)
│   │   ├── research-coordinator.md
│   │   └── research-coordinator-tests.md
│   ├── commands/              # Production commands
│   │   ├── agent-builder-production.md
│   │   ├── command-builder-production.md
│   │   ├── autoproduce.md
│   │   ├── batch_produce.md
│   │   ├── project_create.md
│   │   ├── quality_check.md
│   │   └── system_optimize.md
│   └── sessions/              # Episode production tracking
│       └── episode-session-template.json
│
├── level-3-platform-dev/      # Platform Planning &amp; Design
│   └── openrouter/            # OpenRouter integration docs
│       ├── 00_openrouter_constants.md
│       ├── 25_openrouter_overview.md
│       ├── 26_openrouter_api_integration.md
│       ├── 27_openrouter_model_routing.md
│       ├── 28_openrouter_cost_optimization.md
│       ├── 29_openrouter_production_patterns.md
│       └── NAVIGATION.md
│
└── level-4-coded/             # Future Coded Platform (NO CODE YET)
    └── [Reserved for future Python implementation]
    </directory-tree>
  </structure-overview>

  <key-principles>
    <principle id="level-separation">
      <title>Level Separation</title>
      <rules>
        <rule>Each level has its own directory</rule>
        <rule>Don't mix tools between levels</rule>
        <rule>Use level-specific builders</rule>
      </rules>
    </principle>

    <principle id="shared-resources">
      <title>Shared Resources</title>
      <locations>
        <location>Brand voice used by all levels → shared/brand/</location>
        <location>Quality metrics used by all levels → shared/quality-gates/</location>
        <location>Common templates → shared/templates/</location>
      </locations>
    </principle>

    <principle id="global-context">
      <title>Context is Global</title>
      <rules>
        <rule>All documentation stays in context/</rule>
        <rule>Used by all levels for learning and reference</rule>
        <rule>Not duplicated per level</rule>
      </rules>
    </principle>

    <principle id="clear-naming">
      <title>Clear Naming</title>
      <conventions>
        <convention>Development tools end with -dev</convention>
        <convention>Production tools end with -production</convention>
        <convention>No ambiguity about which level you're in</convention>
      </conventions>
    </principle>

    <principle id="consistent-numbering">
      <title>Consistent Numbering</title>
      <ranges>
        <range>00-09: Constants and foundations</range>
        <range>10-29: Core concepts and features</range>
        <range>30-49: Implementation guides</range>
        <range>50-69: Advanced topics</range>
        <range>70-89: Troubleshooting and reference</range>
        <range>90-99: Meta documentation</range>
      </ranges>
    </principle>
  </key-principles>

  <usage-guide>
    <title>What Goes Where?</title>

    <use-case>
      <scenario>Creating a new development tool?</scenario>
      <instructions>
        <step>Use level-1-dev/commands/agent-builder-dev.md</step>
        <step>Save to level-1-dev/agents/ or level-1-dev/commands/</step>
      </instructions>
    </use-case>

    <use-case>
      <scenario>Creating a podcast production agent?</scenario>
      <instructions>
        <step>Use level-2-production/commands/agent-builder-production.md</step>
        <step>Save to level-2-production/agents/</step>
      </instructions>
    </use-case>

    <use-case>
      <scenario>Documenting how something works?</scenario>
      <instructions>
        <step>Add to appropriate context/ subfolder</step>
      </instructions>
    </use-case>

    <use-case>
      <scenario>Planning the future platform?</scenario>
      <instructions>
        <step>Work in level-3-platform-dev/</step>
      </instructions>
    </use-case>

    <use-case>
      <scenario>Want to write Python code?</scenario>
      <instructions>
        <step>STOP! Get approval first</step>
        <step>Document plan in level-4-coded/documentation/</step>
      </instructions>
    </use-case>
  </usage-guide>

  <file-statistics>
    <statistic name="total-files">~100 markdown files</statistic>
    <statistic name="total-directories">28 (after cleanup from 61)</statistic>
    <statistic name="constants-files">7 (properly scoped)</statistic>
    <statistic name="navigation-files">8 (hierarchical)</statistic>
    <statistic name="empty-directories-removed">33</statistic>
  </file-statistics>

  <recent-cleanup-summary>
    <completed-actions>
      <action status="✅">Removed 33 empty directories</action>
      <action status="✅">Consolidated duplicate ElevenLabs files</action>
      <action status="✅">Fixed file numbering inconsistencies</action>
      <action status="✅">Moved context folder to correct location</action>
      <action status="✅">Created OpenRouter documentation in level-3</action>
      <action status="✅">Moved CLAUDE.md to project root</action>
      <action status="✅">Added file operations best practices</action>
    </completed-actions>

    <dry-principle-enforcement>
      <enforcement>All constants centralized in 00_*_constants.md files</enforcement>
      <enforcement>No duplicate information across files</enforcement>
      <enforcement>All values reference constants</enforcement>
      <enforcement>Cross-references use links, not duplication</enforcement>
    </dry-principle-enforcement>
  </recent-cleanup-summary>

  <navigation-tips>
    <tip>Use @ References: All files support @filename.md quick navigation</tip>
    <tip>Start with NAVIGATION_INDEX.xml: Master guide to all content</tip>
    <tip>Follow Constants: Always check 00_*_constants.md first</tip>
    <tip>Check NAVIGATION.md: Each context folder has its own guide</tip>
    <tip>Use Find Command: find .claude -name "pattern" for searches</tip>
  </navigation-tips>
</documentation>
