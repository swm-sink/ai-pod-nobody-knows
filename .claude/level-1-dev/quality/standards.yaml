# Quality Standards for Level-1-Dev Platform
# Defines measurable quality criteria and enforcement rules

version: "1.0.0"
last_updated: "2025-01-16"
enforcement_level: strict

# Quality Dimensions
dimensions:
  reliability:
    description: "Components work consistently and handle errors gracefully"
    weight: 30

  maintainability:
    description: "Code is readable, documented, and easy to modify"
    weight: 25

  testability:
    description: "Components have comprehensive test coverage"
    weight: 20

  security:
    description: "No vulnerabilities or unsafe practices"
    weight: 15

  performance:
    description: "Efficient resource usage and response times"
    weight: 10

# Specific Standards
standards:
  # Code Quality
  code_quality:
    script_standards:
      - rule: "All scripts must have proper error handling (set -euo pipefail)"
        severity: error
        automated: true

      - rule: "Functions must have descriptive comments"
        severity: warning
        automated: false

      - rule: "Variables must be quoted when used"
        severity: error
        automated: true

      - rule: "No hardcoded paths (use variables)"
        severity: error
        automated: true

      - rule: "Exit codes must be meaningful (0=success, 1=error, 2=fatal)"
        severity: warning
        automated: false

    documentation_standards:
      - rule: "All components must have version headers"
        severity: error
        automated: true

      - rule: "README must include usage examples"
        severity: warning
        automated: false

      - rule: "Complex logic must have inline comments"
        severity: warning
        automated: false

      - rule: "API changes must be documented"
        severity: error
        automated: false

  # Testing Standards
  testing:
    coverage_requirements:
      minimum_coverage: 70
      critical_path_coverage: 90
      new_code_coverage: 80

    test_types:
      - type: unit
        required: true
        location: "tests/unit/"

      - type: integration
        required: true
        location: "tests/integration/"

      - type: validation
        required: false
        location: "tests/validation/"

    test_naming:
      pattern: "test_[component]_[feature].sh"
      example: "test_agent_builder_validation.sh"

  # Version Standards
  versioning:
    format: "MAJOR.MINOR.PATCH"

    bump_rules:
      patch:
        - "Bug fixes"
        - "Documentation updates"
        - "Minor refactoring"

      minor:
        - "New features"
        - "Non-breaking improvements"
        - "New commands or options"

      major:
        - "Breaking API changes"
        - "Incompatible updates"
        - "Major architectural changes"

    commit_standards:
      format: "[type]([scope]): [subject]"
      types:
        - feat     # New feature
        - fix      # Bug fix
        - docs     # Documentation
        - style    # Formatting
        - refactor # Code restructuring
        - test     # Testing
        - chore    # Maintenance

      examples:
        - "feat(agent-builder): add template validation"
        - "fix(test-utils): correct assertion logic"
        - "docs(quality): update standards document"

  # Security Standards
  security:
    forbidden_patterns:
      - pattern: "eval \\$"
        reason: "Command injection risk"
        severity: error

      - pattern: "rm -rf /"
        reason: "Destructive command"
        severity: error

      - pattern: "curl .* | bash"
        reason: "Unsafe remote execution"
        severity: error

      - pattern: "password=|token=|key="
        reason: "Hardcoded secrets"
        severity: error

    required_practices:
      - "Input validation for user data"
      - "Path sanitization for file operations"
      - "Proper quoting of variables"
      - "No execution of untrusted input"

  # Performance Standards
  performance:
    script_execution:
      startup_time_ms: 100
      max_runtime_seconds: 30

    resource_limits:
      max_memory_mb: 512
      max_file_handles: 100
      max_processes: 10

    optimization_rules:
      - "Avoid nested loops when possible"
      - "Use built-in commands over external tools"
      - "Cache expensive computations"
      - "Minimize file I/O operations"

# Quality Gates
gates:
  pre_commit:
    enabled: true
    checks:
      - syntax_validation
      - security_scan
      - format_check
      - version_header_check

    blocking: true
    bypass_with: "--no-verify"

  pre_merge:
    enabled: true
    checks:
      - all_tests_pass
      - coverage_threshold_met
      - no_security_issues
      - documentation_complete
      - version_updated

    blocking: true
    bypass_with: "admin_override"

  release:
    enabled: true
    checks:
      - full_test_suite
      - performance_benchmarks
      - security_audit
      - compatibility_check
      - changelog_updated

    blocking: true
    bypass_with: null  # Cannot bypass

# Metrics and Scoring
scoring:
  calculation_method: "weighted_average"

  grade_thresholds:
    A: 90  # Excellent
    B: 80  # Good
    C: 70  # Acceptable
    D: 60  # Needs Improvement
    F: 0   # Failing

  component_scoring:
    formula: |
      score = (reliability * 0.30) +
              (maintainability * 0.25) +
              (testability * 0.20) +
              (security * 0.15) +
              (performance * 0.10)

# Enforcement
enforcement:
  automatic_checks:
    - version_validation
    - syntax_checking
    - security_scanning
    - test_execution

  manual_reviews:
    - code_review
    - documentation_review
    - architecture_review

  exceptions:
    process: "Create issue with justification"
    approval_required: true
    temporary_duration_days: 30

# Reporting
reporting:
  frequency: "weekly"

  reports:
    - name: "Quality Dashboard"
      format: "markdown"
      location: "reports/quality-dashboard.md"

    - name: "Violation Report"
      format: "json"
      location: "reports/violations.json"

    - name: "Trend Analysis"
      format: "csv"
      location: "reports/quality-trends.csv"

# Continuous Improvement
improvement:
  review_frequency: "monthly"

  feedback_sources:
    - developer_surveys
    - violation_patterns
    - false_positive_rate
    - automation_gaps

  update_process:
    1: "Collect feedback"
    2: "Analyze patterns"
    3: "Propose changes"
    4: "Test impact"
    5: "Update standards"
    6: "Communicate changes"
