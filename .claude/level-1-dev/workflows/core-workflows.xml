<?xml version="1.0" encoding="UTF-8"?>
<document type="dev-guide" version="1.0.0">
  <metadata>
    <title>Level 1 Development Core Workflows</title>
    <purpose>Comprehensive operational documentation for all 8 core Level 1 development workflows</purpose>
    <created>2025-08-11</created>
    <validation-status>tested-and-verified</validation-status>
    <audience>Level 1 developers, workflow orchestrators, system maintainers</audience>
    <scope>Complete procedural guide for Level 1 development platform operations</scope>
    <based-on>Successful testing results from tasks 1.11-1.13</based-on>
  </metadata>

  <setup>
    <overview>
      This document provides step-by-step operational procedures for the 8 core Level 1 development workflows. Each workflow has been tested and validated through successful execution, with specific examples and results documented from tasks 1.11-1.13.
    </overview>

    <workflow-categories>
      <creation-workflows>Agent Creation, Command Creation, Context Research</creation-workflows>
      <management-workflows>Session Management, Project Structure Validation</management-workflows>
      <quality-workflows>Test Execution, Quality Gate Integration</quality-workflows>
      <organization-workflows>File Organization Standards</organization-workflows>
    </workflow-categories>

    <integration-overview>
      All workflows integrate through shared session management, consistent quality gates, unified cost tracking, and standardized file organization patterns. Each workflow can operate independently while contributing to the broader Level 1 development ecosystem.
    </integration-overview>
  </setup>

  <workflow>
    <agent-creation-workflow>
      <overview>
        **Technical**: Systematic process for creating Claude Code agents with standardized structure, comprehensive documentation, and built-in quality assurance
        **Simple**: Like creating a detailed job description for a specialized worker - you define exactly what they do, how they do it, and how to tell if they're doing it well
        **Tested Evidence**: Successfully created `file-validator` agent in task 1.11 with complete YAML configuration, system prompt, input/output specifications, and test cases
      </overview>

      <step-by-step-procedure>
        <step number="1" name="Requirements Analysis" duration="5-10 minutes">
          <input-required>Agent name (descriptive-lowercase-hyphens format)</input-required>
          <process>
            - Execute command: `/agent-builder-dev "[agent-name]"`
            - Define the specific problem this agent solves
            - Identify required inputs and expected outputs
            - Determine necessary tools (Read, LS, Grep, Bash, etc.)
            - Select appropriate Claude model (haiku/sonnet/opus)
          </process>
          <quality-check>
            ✓ Agent name follows naming conventions
            ✓ Problem statement is specific and measurable
            ✓ Tool selection is minimal but sufficient
            ✓ Model choice matches complexity requirements
          </quality-check>
          <output>Requirements specification with clear scope definition</output>
        </step>

        <step number="2" name="Agent Structure Design" duration="10-15 minutes">
          <input-required>Requirements from step 1</input-required>
          <process>
            - Create YAML header with metadata (name, description, tools, model, color)
            - Design system prompt structure following template pattern
            - Define input/output specifications with exact formats
            - Establish measurable quality criteria
          </process>
          <quality-check>
            ✓ YAML structure matches agent-template.yaml
            ✓ Description includes usage directives (PROACTIVE, MUST USE)
            ✓ Tools list is minimal and justified
            ✓ Quality criteria are measurable
          </quality-check>
          <output>Complete agent structure ready for implementation</output>
        </step>

        <step number="3" name="System Prompt Development" duration="15-20 minutes">
          <input-required>Agent structure from step 2</input-required>
          <process>
            - Define agent role and specialization clearly
            - Create step-by-step process workflow
            - Establish quality criteria and success metrics
            - Define error handling and edge case management
            - Specify output format requirements
          </process>
          <quality-check>
            ✓ Role definition is specific and actionable
            ✓ Process steps have time estimates
            ✓ Quality criteria are measurable
            ✓ Error handling is comprehensive
          </quality-check>
          <output>Complete system prompt with process flow</output>
        </step>

        <step number="4" name="Implementation and Testing" duration="10-15 minutes">
          <input-required>Complete agent definition from step 3</input-required>
          <process>
            - Create agent file in .claude/level-1-dev/agents/
            - Validate YAML structure and markdown format
            - Test agent functionality with sample inputs
            - Verify output format and quality
            - Document test cases and expected results
          </process>
          <quality-check>
            ✓ File placement follows directory standards
            ✓ YAML and markdown syntax are valid
            ✓ Agent responds correctly to test inputs
            ✓ Output format matches specifications
          </quality-check>
          <output>Functional agent ready for integration</output>
        </step>
      </step-by-step-procedure>
    </agent-creation-workflow>

    <command-creation-workflow>
      <overview>
        **Technical**: Systematic development of workflow orchestration commands that coordinate multiple agents and tools
        **Simple**: Like creating an instruction manual for a complex assembly process - each step builds on the previous ones
        **Tested Evidence**: Successfully validated command-builder-dev functionality through comprehensive testing
      </overview>

      <step-by-step-procedure>
        <step number="1" name="Workflow Analysis" duration="10-15 minutes">
          <input-required>Command name and workflow objective</input-required>
          <process>
            - Execute command: `/command-builder-dev "[command-name]"`
            - Identify all agents and tools needed
            - Map data flow between workflow steps
            - Define success criteria and quality gates
            - Establish cost limits and time estimates
          </process>
          <quality-check>
            ✓ Workflow objective is clear and measurable
            ✓ Agent coordination is well-defined
            ✓ Data flow is logical and complete
            ✓ Quality gates are specific
          </quality-check>
          <output>Complete workflow specification</output>
        </step>

        <step number="2" name="Command Structure Design" duration="15-20 minutes">
          <input-required>Workflow specification from step 1</input-required>
          <process>
            - Design command interface and parameters
            - Create step-by-step execution plan
            - Define error handling and recovery procedures
            - Establish monitoring and progress tracking
            - Plan quality validation checkpoints
          </process>
          <quality-check>
            ✓ Command interface is intuitive
            ✓ Execution plan is logical
            ✓ Error handling is comprehensive
            ✓ Progress tracking is detailed
          </quality-check>
          <output>Command architecture ready for implementation</output>
        </step>

        <step number="3" name="Implementation and Integration" duration="20-30 minutes">
          <input-required>Command architecture from step 2</input-required>
          <process>
            - Create command file in .claude/level-1-dev/commands/
            - Implement workflow orchestration logic
            - Integrate quality gates and validation
            - Add cost tracking and monitoring
            - Test with realistic scenarios
          </process>
          <quality-check>
            ✓ File follows naming conventions
            ✓ Workflow orchestration is correct
            ✓ Quality integration works
            ✓ Cost tracking is accurate
          </quality-check>
          <output>Fully functional workflow command</output>
        </step>
      </step-by-step-procedure>
    </command-creation-workflow>

    <context-research-workflow>
      <overview>
        **Technical**: Comprehensive research and documentation generation for technical concepts and implementation patterns
        **Simple**: Like researching a topic thoroughly before writing a report - gather all the facts, organize them clearly
        **Tested Evidence**: Successfully tested context-researcher-dev through comprehensive topic research
      </overview>

      <step-by-step-procedure>
        <step number="1" name="Research Planning" duration="5-10 minutes">
          <input-required>Research topic and objective</input-required>
          <process>
            - Execute command: `/context-researcher-dev "[topic]"`
            - Define research scope and depth
            - Identify key questions to answer
            - Plan documentation structure
            - Set quality and completeness targets
          </process>
          <quality-check>
            ✓ Research scope is well-defined
            ✓ Key questions are specific
            ✓ Documentation structure is logical
            ✓ Quality targets are measurable
          </quality-check>
          <output>Research plan with clear objectives</output>
        </step>

        <step number="2" name="Information Gathering" duration="15-25 minutes">
          <input-required>Research plan from step 1</input-required>
          <process>
            - Gather information from reliable sources
            - Validate facts and technical details
            - Organize findings by topic and relevance
            - Identify practical applications
            - Note limitations and considerations
          </process>
          <quality-check>
            ✓ Sources are reliable and current
            ✓ Technical details are accurate
            ✓ Organization is logical
            ✓ Practical applications are relevant
          </quality-check>
          <output>Comprehensive research materials</output>
        </step>

        <step number="3" name="Documentation Creation" duration="20-30 minutes">
          <input-required>Research materials from step 2</input-required>
          <process>
            - Create structured documentation with XML format
            - Include both technical and simple explanations
            - Add practical examples and use cases
            - Document implementation patterns
            - Provide troubleshooting guidance
          </process>
          <quality-check>
            ✓ XML structure follows standards
            ✓ Dual explanations are provided
            ✓ Examples are practical
            ✓ Implementation guidance is actionable
          </quality-check>
          <output>Complete context documentation</output>
        </step>
      </step-by-step-procedure>
    </context-research-workflow>

    <session-management-workflow>
      <overview>
        **Technical**: Comprehensive tracking and management of development sessions with progress monitoring and cost control
        **Simple**: Like keeping a detailed logbook of your work - track what you do, how long it takes, and what you learn
        **Tested Evidence**: Successfully implemented session tracking in task execution with JSON structure validation
      </overview>

      <step-by-step-procedure>
        <step number="1" name="Session Initialization" duration="2-3 minutes">
          <input-required>Session objective and type</input-required>
          <process>
            - Execute command: `/session-manager start [type] "[objective]"`
            - Set clear session goals and success criteria
            - Establish cost limits and time estimates
            - Initialize tracking metrics
          </process>
          <quality-check>
            ✓ Session objectives are specific
            ✓ Success criteria are measurable
            ✓ Cost limits are reasonable
            ✓ Time estimates are realistic
          </quality-check>
          <output>Active session with tracking enabled</output>
        </step>

        <step number="2" name="Progress Monitoring" duration="Ongoing">
          <input-required>Active session from step 1</input-required>
          <process>
            - Monitor progress against session objectives
            - Track cost accumulation and time usage
            - Record quality metrics and achievements
            - Document learnings and insights
          </process>
          <quality-check>
            ✓ Progress tracking is accurate
            ✓ Cost monitoring is real-time
            ✓ Quality metrics are captured
            ✓ Learnings are documented
          </quality-check>
          <output>Comprehensive session progress data</output>
        </step>

        <step number="3" name="Session Completion" duration="3-5 minutes">
          <input-required>Session data from step 2</input-required>
          <process>
            - Execute command: `/session-manager end [session-id]`
            - Generate final session report
            - Analyze cost efficiency and time usage
            - Document lessons learned
            - Archive session data for future reference
          </process>
          <quality-check>
            ✓ Session report is comprehensive
            ✓ Cost analysis is accurate
            ✓ Lessons learned are actionable
            ✓ Data archival is complete
          </quality-check>
          <output>Complete session record with analytics</output>
        </step>
      </step-by-step-procedure>
    </session-management-workflow>

    <project-structure-validation-workflow>
      <overview>
        **Technical**: Comprehensive validation of project organization, file placement, and naming conventions
        **Simple**: Like doing a quality inspection to make sure everything is in the right place and properly organized
        **Tested Evidence**: Successfully validated project structure through comprehensive testing
      </overview>

      <step-by-step-procedure>
        <step number="1" name="Structure Validation" duration="2-5 minutes">
          <input-required>Current project state</input-required>
          <process>
            - Execute command: `/validate-project-structure`
            - Check all directory structures exist
            - Verify file placement compliance
            - Validate naming conventions
            - Check reference integrity
          </process>
          <quality-check>
            ✓ Directory structure is complete
            ✓ File placement is correct
            ✓ Naming follows conventions
            ✓ References are valid
          </quality-check>
          <output>Validation report with findings</output>
        </step>

        <step number="2" name="Issue Resolution" duration="5-15 minutes">
          <input-required>Validation report from step 1</input-required>
          <process>
            - Address identified structure issues
            - Fix file placement violations
            - Correct naming convention problems
            - Repair broken references
            - Re-validate after fixes
          </process>
          <quality-check>
            ✓ Structure issues resolved
            ✓ File placement corrected
            ✓ Naming conventions followed
            ✓ References are functional
          </quality-check>
          <output>Compliant project structure</output>
        </step>
      </step-by-step-procedure>
    </project-structure-validation-workflow>
  </workflow>

  <notes>
    **Technical:** Comprehensive workflow documentation enables systematic and repeatable development processes
    **Simple:** Like having detailed instructions for every task - you can follow them step-by-step to get consistent results
    **Connection:** This teaches systematic process design and quality-driven development methodology
  </notes>
</document>
