<?xml version="1.0" encoding="UTF-8"?>
<document type="dev-guide" version="1.0.0">
  <metadata>
    <title>Developer Experience Optimization Guide</title>
    <purpose>Practical tools and references for efficient Level 1 development workflows</purpose>
    <created>2025-08-11</created>
    <validation-status>ready-for-production</validation-status>
    <audience>Daily developers, troubleshooters, workflow optimizers</audience>
    <scope>Quick reference, troubleshooting, templates, and performance optimization</scope>
  </metadata>

  <setup>
    <purpose>
      This guide provides time-saving tools and quick references that make Level 1 development workflows efficient and accessible. Designed for developers who need answers in under 30 seconds and want to avoid common pitfalls while accelerating development tasks.
    </purpose>

    <key-benefits>
      - **30-Second Solutions**: Find answers to common questions quickly
      - **Error Prevention**: Avoid common pitfalls with proven patterns
      - **Task Acceleration**: Copy-paste templates for common development work
      - **Performance Optimization**: Measurable improvements to development speed and cost
      - **Decision Support**: Systematic troubleshooting for 80% of common issues
    </key-benefits>
  </setup>

  <usage>
    <command-reference>
      <agent-builder-dev>
        <purpose>Create new agents with consistent structure</purpose>
        <time-estimate>15-30 minutes</time-estimate>
        <cost-estimate>$1.00-$3.00</cost-estimate>
        <common-use-cases>Building validation agents, Creating specialized workflow helpers, Designing testing agents</common-use-cases>
        <quick-syntax>/agent-builder-dev "my-validator-agent"</quick-syntax>
        <output-location>.claude/level-1-dev/agents/[agent-name].md</output-location>
      </agent-builder-dev>

      <command-builder-dev>
        <purpose>Build workflow orchestration commands</purpose>
        <time-estimate>20-45 minutes</time-estimate>
        <cost-estimate>$1.50-$4.00</cost-estimate>
        <common-use-cases>Multi-step workflow automation, Quality gate integration, Complex orchestration patterns</common-use-cases>
        <quick-syntax>/command-builder-dev "my-workflow-command"</quick-syntax>
        <output-location>.claude/level-1-dev/commands/[command-name]-dev.md</output-location>
      </command-builder-dev>

      <context-researcher-dev>
        <purpose>Generate comprehensive documentation</purpose>
        <time-estimate>25-50 minutes</time-estimate>
        <cost-estimate>$2.00-$5.00</cost-estimate>
        <common-use-cases>Technical concept documentation, Best practices research, Integration pattern analysis</common-use-cases>
        <quick-syntax>/context-researcher-dev "claude-code-optimization-patterns"</quick-syntax>
        <output-location>.claude/level-1-dev/context/[topic].md</output-location>
      </context-researcher-dev>

      <session-manager>
        <purpose>Track development progress and costs</purpose>
        <time-estimate>2-5 minutes</time-estimate>
        <cost-estimate>$0.10-$0.50</cost-estimate>
        <operations>start [level] [purpose], status, end [session-id], report [timeframe]</operations>
        <quick-syntax>/session-manager start dev "agent-testing"</quick-syntax>
        <output-location>.claude/level-1-dev/sessions/[type]_YYYYMMDD_HHMM.json</output-location>
      </session-manager>

      <validate-project-structure>
        <purpose>Comprehensive project organization validation</purpose>
        <time-estimate>3-8 minutes</time-estimate>
        <cost-estimate>$0.25-$0.75</cost-estimate>
        <validation-checks>Directory structure compliance, File placement verification, Naming convention adherence, Reference integrity validation</validation-checks>
        <quick-syntax>/validate-project-structure</quick-syntax>
        <output-location>.claude/level-1-dev/validation-reports/</output-location>
      </validate-project-structure>

      <test-workflow>
        <purpose>Execute testing procedures for Level 1 components</purpose>
        <time-estimate>10-30 minutes</time-estimate>
        <cost-estimate>$0.50-$2.00</cost-estimate>
        <test-types>Agent functionality testing, Command workflow validation, Integration pattern verification</test-types>
        <quick-syntax>/test-workflow "agent-builder-dev"</quick-syntax>
        <output-location>.claude/level-1-dev/test-results/</output-location>
      </test-workflow>
    </command-reference>

    <constants-reference>
      <level-paths>
        - LEVEL_1_DEV: .claude/level-1-dev/
        - LEVEL_2_PRODUCTION: .claude/level-2-production/
        - LEVEL_3_PLATFORM: .claude/level-3-platform-dev/
        - LEVEL_4_CODED: .claude/level-4-coded/ (REQUIRES APPROVAL)
      </level-paths>

      <cost-limits>
        - COST_LIMIT_PER_EPISODE: $9.00
        - PERPLEXITY_LIMIT: $3.00 per episode
        - ELEVENLABS_LIMIT: $2.00 per episode
        - Development session target: < $5.00
      </cost-limits>

      <quality-targets>
        - QUALITY_SCORE_TARGET: 0.85
        - BRAND_VOICE_TARGET: 0.90
        - First-pass success rate: > 90%
        - Session timeout: 60 minutes
      </quality-targets>

      <naming-patterns>
        - Development files: *-dev.md
        - Session files: [type]_YYYYMMDD_HHMM.json
        - Directories: lowercase-with-hyphens
        - Agent names: descriptive-purpose.md
      </naming-patterns>
    </constants-reference>
  </usage>

  <troubleshooting>
    <universal-process>
      <step number="1">Identify Issue Category: File/Directory, Command Execution, Quality/Validation, Cost/Performance, or Integration Issues</step>
      <step number="2">Use specific troubleshooting section for detailed resolution steps</step>
      <step number="3">Apply systematic fix approach with validation</step>
      <step number="4">Document resolution for future reference</step>
    </universal-process>

    <file-directory-issues>
      <file-placement-errors>
        <symptoms>Validation errors about file placement, Tools can't find expected files, Naming convention warnings</symptoms>
        <diagnosis>/validate-project-structure</diagnosis>
        <solution>Move file to correct level directory, Update references, Run validation again</solution>
        <prevention>Always use level-specific builders</prevention>
      </file-placement-errors>

      <naming-convention-violations>
        <symptoms>Validation failures, Inconsistent file organization, Tools can't locate files by pattern</symptoms>
        <diagnosis>find .claude -name "*[A-Z]*" -o -name "*_*" -o -name "* *"</diagnosis>
        <solution>Rename files to lowercase-with-hyphens, Update internal references, Follow pattern: [purpose]-[type].md</solution>
        <prevention>Reference naming patterns in constants</prevention>
      </naming-convention-violations>

      <missing-required-directories>
        <symptoms>File creation errors, Structure validation failures, Tools report missing paths</symptoms>
        <diagnosis>find .claude -type d | sort</diagnosis>
        <solution>Create missing directories with proper structure, Set appropriate permissions, Run validation</solution>
        <prevention>Always run structure validation before starting development</prevention>
      </missing-required-directories>
    </file-directory-issues>

    <command-execution-issues>
      <command-not-found>
        <symptoms>"Command not recognized" errors, Commands hang or timeout, No output or progress indicators</symptoms>
        <diagnosis>Check if command file exists, Verify command syntax, Check session timeout limits</diagnosis>
        <solution>Verify command exists in commands/, Check exact syntax in command file, Try with simpler arguments, Start new session if timeout</solution>
        <prevention>Use /session-manager to track active operations and timeouts</prevention>
      </command-not-found>

      <quality-gate-failures>
        <symptoms>Validation errors in command output, Tools refuse to proceed, Quality score below threshold</symptoms>
        <diagnosis>Review specific quality criteria that failed, Check input parameters, Verify template compliance</diagnosis>
        <solution>Fix specific issues in error messages, Validate inputs against requirements, Use /test-workflow to verify fixes, Re-run with corrected inputs</solution>
        <prevention>Always validate inputs before running complex commands</prevention>
      </quality-gate-failures>

      <cost-limit-exceeded>
        <symptoms>Commands stop with budget warnings, Session terminated early, Cost tracking alerts</symptoms>
        <diagnosis>/session-manager status</diagnosis>
        <solution>Review cost breakdown, Optimize approach (use Haiku instead of Sonnet), Break work into smaller sessions, Use batch processing</solution>
        <prevention>Monitor costs with /session-manager and use appropriate models</prevention>
      </cost-limit-exceeded>
    </command-execution-issues>
  </troubleshooting>

  <templates>
    <simple-validation-agent>
      <use-case>Create an agent that validates file content or structure</use-case>
      <template>
        /agent-builder-dev "content-validator"
        Purpose: Validate [specific content type] for [specific criteria]
        Tools needed: ["Read", "Grep"]
        Model: haiku (for cost efficiency)
        Color: blue
        Process: 1. Read input file, 2. Check against validation criteria, 3. Report compliance status, 4. Provide specific improvement recommendations
        Quality criteria: 100% accuracy in validation, Clear actionable feedback, Completion under 2 minutes
      </template>
      <estimated-time>15 minutes</estimated-time>
      <estimated-cost>$0.75</estimated-cost>
    </simple-validation-agent>

    <multi-step-workflow-command>
      <use-case>Create a command that orchestrates multiple agents or operations</use-case>
      <template>
        /command-builder-dev "quality-workflow"
        Purpose: Execute comprehensive quality validation across multiple components
        Tools needed: Multiple agents for different validation steps
        Process: 1. Input validation (5 min), 2. Structure validation (10 min), 3. Content validation (15 min), 4. Integration validation (10 min), 5. Generate report (5 min)
        Quality gates: Each step must pass before next begins, Error recovery at each checkpoint, Comprehensive reporting
      </template>
      <estimated-time>30 minutes</estimated-time>
      <estimated-cost>$2.50</estimated-cost>
    </multi-step-workflow-command>

    <research-documentation>
      <use-case>Create comprehensive documentation for a technical concept</use-case>
      <template>
        /context-researcher-dev "optimization-patterns"
        Topic: [Specific technical concept or pattern]
        Research depth: Comprehensive with practical examples
        Include: Both technical and simple explanations
        Structure: Overview and use cases, Implementation patterns, Common pitfalls and solutions, Performance characteristics, Integration considerations, Real-world examples
      </template>
      <estimated-time>35 minutes</estimated-time>
      <estimated-cost>$3.00</estimated-cost>
    </research-documentation>
  </templates>

  <validation>
    <before-starting-development>
      - Project structure validation passed
      - Development session started
      - Clear objectives defined
      - Success criteria established
      - Cost budget allocated
    </before-starting-development>

    <during-development>
      - Using appropriate templates
      - Following naming conventions
      - Files placed in correct directories
      - Regular progress tracking
      - Cost monitoring active
    </during-development>

    <before-deployment>
      - All validation checks passed
      - Test cases included and working
      - Documentation complete
      - Integration tested
      - Cost within budget
      - Session ended with learnings
    </before-deployment>

    <quality-gate-validation>
      - Template compliance: 100%
      - Naming conventions: 100%
      - Reference integrity: 100%
      - Test coverage: Required tests present
      - Documentation: Technical + simple explanations
      - Cost efficiency: Within target ranges
    </quality-gate-validation>
  </validation>

  <notes>
    **Technical:** Developer experience optimization reduces cognitive load and accelerates development workflows
    **Simple:** Like having a well-organized toolbox where you can find exactly what you need in seconds
    **Connection:** This teaches efficient development practices and systematic problem-solving approaches
  </notes>
</document>
