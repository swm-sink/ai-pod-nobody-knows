<?xml version="1.0" encoding="UTF-8"?>
<file-format-policy-specification xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <metadata>
    <title>Comprehensive File Format Policy Specification</title>
    <version>1.0.0</version>
    <created>2025-08-12</created>
    <type>quality-standard</type>
    <domain>project-wide</domain>
    <purpose>Definitive guide for file format standards and enforcement across the entire project</purpose>
    <authority>This document is the authoritative source for all file format decisions</authority>
  </metadata>

  <critical-requirement>
    <principle>Standardized file formats ensure consistency, maintainability, and automation across the project</principle>
    <enforcement-level>MANDATORY - ZERO TOLERANCE FOR VIOLATIONS</enforcement-level>
    <learning-value>
      <technical>File format standardization enables automated processing, reduces cognitive load, and prevents format confusion in complex systems</technical>
      <simple>Like having consistent file extensions - you know .jpg is an image and .mp3 is audio without opening the file</simple>
      <connection>This teaches you about system design patterns, consistency enforcement, and technical debt prevention</connection>
    </learning-value>
  </critical-requirement>

  <xml-format-requirement>
    <title>XML Format (.xml) - PRIMARY STANDARD</title>
    <description>XML is the default format for ALL documentation, specifications, and structured content</description>

    <mandatory-usage>
      <category>Documentation Files</category>
      <includes>
        - All context documentation (foundation/, quality/, operations/, etc.)
        - All analysis documents and reports
        - All implementation plans and specifications
        - All shared frameworks and templates
        - All constants files (00_*_constants.xml)
        - All architecture documentation
        - All quality gates and validation files
        - All configuration specifications
        - All test reports and validation documents
        - All handoff packages and transition documents
      </includes>
    </mandatory-usage>

    <benefits>
      <benefit>Structured metadata support with attributes and namespaces</benefit>
      <benefit>Semantic tagging for better comprehension</benefit>
      <benefit>Enhanced Claude Code integration with XML parsing</benefit>
      <benefit>Validation support through XSD schemas</benefit>
      <benefit>Better version control diff readability</benefit>
      <benefit>Consistent hierarchical structure</benefit>
      <benefit>Machine-readable for automation</benefit>
    </benefits>

    <validation>
      <command>xmllint --noout [file.xml]</command>
      <command>find .claude -name "*.xml" -exec xmllint --noout {} \;</command>
    </validation>
  </xml-format-requirement>

  <markdown-format-exceptions>
    <title>Markdown Format (.md) - EXCEPTIONS ONLY</title>
    <description>Markdown is ONLY permitted for specific operational files that require it</description>

    <exception-categories>
      <category name="Claude Code Requirements">
        <purpose>Files that MUST be .md for Claude Code functionality</purpose>
        <files>
          <file>Agents (level-*/agents/*.md)</file>
          <file>Commands (level-*/commands/*.md)</file>
        </files>
        <rationale>Claude Code's agent and command system requires markdown format</rationale>
      </category>

      <category name="System Documentation">
        <purpose>Standard entry points and master configuration</purpose>
        <files>
          <file>CLAUDE.md - Master system prompt</file>
          <file>CLAUDE.local.md - Local configuration (if present)</file>
          <file>README.md files - Repository entry points</file>
        </files>
        <rationale>Industry standard conventions and Claude Code requirements</rationale>
      </category>

      <category name="Navigation Indexes">
        <purpose>Navigation and directory organization files</purpose>
        <files>
          <file>NAVIGATION.md files - Directory navigation indexes</file>
          <file>NAVIGATION_INDEX.md - Main navigation hub for @ file hopping</file>
          <file>Context navigation files (**/context/*/NAVIGATION.md)</file>
          <file>Level navigation files (level-*/NAVIGATION.md)</file>
        </files>
        <rationale>Navigation files benefit from markdown's linking and readability features</rationale>
      </category>

      <category name="Temporary Operational">
        <purpose>Temporary files for active operations</purpose>
        <files>
          <file>Session handover files (.claude/sessions/handover_*.md)</file>
          <file>Active session tracking files</file>
          <file>Temporary operational reports during execution</file>
        </files>
        <rationale>Temporary files that will be converted or removed after use</rationale>
      </category>
    </exception-categories>

    <important-note>
      ANY .md file created outside these exceptions MUST be immediately converted to .xml format
    </important-note>
  </markdown-format-exceptions>

  <enforcement-protocols>
    <protocol level="1">
      <name>Immediate Violation Detection</name>
      <description>Claude must detect format violations as they occur</description>
      <action>Stop current operation and alert about violation</action>
      <command>find .claude -name "*.md" | grep -v -E "(agents|commands|NAVIGATION|README|CLAUDE|handover)"</command>
    </protocol>

    <protocol level="2">
      <name>Mandatory Conversion</name>
      <description>Any violating .md file must be converted immediately</description>
      <action>Convert to .xml format and delete .md version</action>
      <validation>Verify XML syntax after conversion</validation>
    </protocol>

    <protocol level="3">
      <name>Work Invalidation</name>
      <description>Work performed with format violations is considered invalid</description>
      <action>Must redo work with correct format before proceeding</action>
      <consequence>Time and effort lost due to non-compliance</consequence>
    </protocol>

    <protocol level="4">
      <name>Continuous Monitoring</name>
      <description>Regular format compliance checks throughout operations</description>
      <frequency>After each major task completion</frequency>
      <command>bash -c 'echo "XML files: $(find .claude -name "*.xml" | wc -l)"; echo "MD files: $(find .claude -name "*.md" | wc -l)"'</command>
    </protocol>
  </enforcement-protocols>

  <common-violations-and-fixes>
    <violation>
      <type>Analysis documents created as .md</type>
      <example>50-branch-analysis.md</example>
      <fix>Convert to 50-branch-analysis.xml immediately</fix>
      <prevention>Always use .xml extension for analysis documents</prevention>
    </violation>

    <violation>
      <type>Implementation plans as .md</type>
      <example>implementation-roadmap.md</example>
      <fix>Convert to implementation-roadmap.xml with proper structure</fix>
      <prevention>All plans and specifications must be .xml from creation</prevention>
    </violation>

    <violation>
      <type>Reports and summaries as .md</type>
      <example>production-readiness-report.md</example>
      <fix>Convert to production-readiness-report.xml</fix>
      <prevention>All reports must use XML format for structure and metadata</prevention>
    </violation>
  </common-violations-and-fixes>

  <validation-commands>
    <command name="Check for violations">
      <description>Find any .md files outside allowed exceptions</description>
      <code>find .claude -name "*.md" | grep -v -E "(agents|commands|NAVIGATION|README|CLAUDE|handover)" | head -20</code>
    </command>

    <command name="Count by format">
      <description>Show distribution of file formats</description>
      <code>echo "XML: $(find .claude -name "*.xml" | wc -l) | MD: $(find .claude -name "*.md" | wc -l)"</code>
    </command>

    <command name="Validate XML syntax">
      <description>Check all XML files for syntax errors</description>
      <code>find .claude -name "*.xml" -exec xmllint --noout {} + 2>&amp;1 | grep -c "error"</code>
    </command>

    <command name="List navigation files">
      <description>Show all allowed navigation .md files</description>
      <code>find .claude -name "NAVIGATION*.md" | sort</code>
    </command>
  </validation-commands>

  <migration-guidance>
    <step number="1">
      <action>Identify violating .md files</action>
      <command>find .claude -name "*.md" | grep -v -E "(agents|commands|NAVIGATION|README|CLAUDE|handover)"</command>
    </step>

    <step number="2">
      <action>Create XML version with proper structure</action>
      <template>
        <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<document-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <metadata>
    <title>[Document Title]</title>
    <version>1.0.0</version>
    <created>[Date]</created>
    <type>[Type]</type>
  </metadata>

  <content>
    [Converted content with proper XML structure]
  </content>
</document-type>
        ]]>
      </template>
    </step>

    <step number="3">
      <action>Validate XML syntax</action>
      <command>xmllint --noout [new-file.xml]</command>
    </step>

    <step number="4">
      <action>Delete original .md file</action>
      <command>rm [old-file.md]</command>
    </step>

    <step number="5">
      <action>Update any references to the file</action>
      <command>grep -r "[old-file.md]" .claude/ | head -20</command>
    </step>
  </migration-guidance>

  <educational-outcomes>
    <outcome>Understanding of file format standardization importance</outcome>
    <outcome>Knowledge of XML benefits for structured documentation</outcome>
    <outcome>Awareness of when exceptions are appropriate</outcome>
    <outcome>Skills in format migration and validation</outcome>
    <outcome>Appreciation for consistency in large projects</outcome>
  </educational-outcomes>

  <conclusion>
    <summary>
      This file format policy ensures project-wide consistency, maintainability, and automation capability.
      XML is the standard for all documentation except specific operational requirements.
      Navigation indexes and context organization files are permitted as .md for usability.
      Strict enforcement prevents technical debt and maintains system quality.
    </summary>

    <remember>
      When in doubt, use .xml format. Only use .md for explicitly exempted categories.
      Navigation and context indexes are valid .md exceptions alongside agents and commands.
    </remember>
  </conclusion>
</file-format-policy-specification>
