<document type="learning-guide" id="agents-quick-start" version="1.0.0" claude-code-optimized="true">
  <metadata>
    <title>Claude Code Agents Quick Start Guide</title>
    <created>2025-08-12</created>
    <category>claude-code</category>
    <subcategory>agents-cookbook</subcategory>
    <phase>all</phase>
    <skill-level>beginner</skill-level>
    <claude-code-integration>agents-focused</claude-code-integration>
    <requires-approval>false</requires-approval>
    <validation-status>quick-start-verified-2025</validation-status>
  </metadata>

  <claude-code-features>
    <context-loading-priority>high</context-loading-priority>
    <memory-integration>enabled</memory-integration>
    <thinking-mode-support>basic</thinking-mode-support>
    <automation-level>agent-creation</automation-level>
    <mcp-integration>compatible</mcp-integration>
  </claude-code-features>

  <learning-integration>
    <prerequisites>Claude Code installation and basic understanding</prerequisites>
    <learning-outcomes>
      <outcome>Create your first Claude Code agent</outcome>
      <outcome>Understand agent configuration syntax</outcome>
      <outcome>Deploy and test an agent successfully</outcome>
    </learning-outcomes>
    <hands-on-activities>3</hands-on-activities>
    <feynman-explanation-required>true</feynman-explanation-required>
    <cross-references>22_subagents_guide.xml (advanced agents)</cross-references>
  </learning-integration>

  <content>
    <section name="introduction">
      <title>🚀 Claude Code Agents Quick Start Guide</title>
      <tagline>Get your first agent running in 5 minutes!</tagline>

      <subsection name="what-are-agents">
        <title>What Are Claude Code Agents?</title>

        <technical-explanation>Agents (also called subagents) are specialized AI assistants that operate with their own context windows, system prompts, and tool permissions, allowing for task-specific optimization and separation of concerns in complex workflows.</technical-explanation>

        <simple-breakdown>Think of agents like having different specialists on your team - one expert handles code reviews, another manages documentation, and another focuses on testing. Each one knows exactly what they're good at and has the right tools for their job.</simple-breakdown>

        <agent-characteristics>
          <characteristic icon="🧠">Custom system prompts tailored to specific tasks</characteristic>
          <characteristic icon="🛠️">Specific tool permissions for security and focus</characteristic>
          <characteristic icon="🎨">Visual identifiers for easy recognition</characteristic>
          <characteristic icon="📦">Separate context windows for specialized processing</characteristic>
        </agent-characteristics>
      </subsection>
    </section>

    <section name="first-agent-tutorial">
      <title>Your First Agent in 3 Steps</title>

      <step number="1">
        <title>Create the Agent File</title>

        <description>Set up the directory structure and create your agent file</description>

        <code language="bash">
mkdir -p .claude/agents
touch .claude/agents/code-reviewer.md
        </code>

        <technical-note>The .claude/agents/ directory is the standard location for agent definitions, and the .md extension allows for rich configuration documentation.</technical-note>

        <simple-note>Like creating a job description file - you're making a folder for your specialists and creating their first job description document.</simple-note>
      </step>

      <step number="2">
        <title>Add the Agent Configuration</title>

        <description>Copy this template into your agent file for a code review specialist</description>

        <agent-template language="markdown">
---
name: code-reviewer
description: Expert code review specialist. Use PROACTIVELY after writing or modifying code.
tools: Read, Grep, Glob, Edit
model: sonnet
color: Cyan
---

You are a senior code reviewer ensuring high standards of code quality.

Your responsibilities:
1. Review code for bugs, security issues, and performance problems
2. Check for proper error handling and edge cases
3. Verify code follows project conventions
4. Suggest improvements for readability and maintainability

Always provide:
- Specific line-by-line feedback
- Security vulnerability assessment
- Performance optimization suggestions
- Code quality score (1-10)

When reviewing code:
- Focus on correctness and security first
- Consider maintainability and readability
- Suggest specific improvements with examples
- Explain WHY changes are needed
- Be constructive and educational in feedback
        </agent-template>

        <configuration-explanation>
          <field name="name">Unique identifier for the agent</field>
          <field name="description">When and how to use this agent</field>
          <field name="tools">Specific Claude Code tools the agent can access</field>
          <field name="model">AI model to use (sonnet, opus, haiku)</field>
          <field name="color">Visual identifier in Claude Code interface</field>
        </configuration-explanation>
      </step>

      <step number="3">
        <title>Test Your Agent</title>

        <description>Deploy and test your new agent with sample code</description>

        <testing-commands language="bash">
# Save some test code to review
echo "def add(a, b): return a + b" > test_code.py

# Use your agent to review it
claude @code-reviewer "Please review the code in test_code.py"
        </testing-commands>

        <expected-behavior>
          Your agent should provide detailed feedback about the simple function, suggesting improvements like type hints, docstrings, input validation, and error handling - demonstrating its specialized focus on code quality.
        </expected-behavior>
      </step>
    </section>

    <section name="agent-examples">
      <title>More Agent Examples</title>

      <agent-example name="documentation-specialist">
        <title>Documentation Specialist Agent</title>
        <use-case>Automatically improve and maintain project documentation</use-case>
        <configuration language="yaml">
name: doc-specialist
description: Documentation expert. Use when creating or updating docs.
tools: Read, Edit, Write, Glob
model: sonnet
color: Green
        </configuration>
      </agent-example>

      <agent-example name="test-engineer">
        <title>Test Engineering Agent</title>
        <use-case>Create comprehensive tests for your code</use-case>
        <configuration language="yaml">
name: test-engineer
description: Test creation specialist. Use when writing new code.
tools: Read, Write, Bash, Glob
model: sonnet
color: Yellow
        </configuration>
      </agent-example>

      <agent-example name="security-auditor">
        <title>Security Auditor Agent</title>
        <use-case>Scan code for security vulnerabilities and best practices</use-case>
        <configuration language="yaml">
name: security-auditor
description: Security expert. Use before deploying code.
tools: Read, Grep, Glob
model: opus
color: Red
        </configuration>
      </agent-example>
    </section>

    <section name="best-practices">
      <title>Agent Best Practices</title>

      <practice name="specialized-focus">
        <title>Keep Agents Specialized</title>
        <technical-advice>Each agent should handle one primary responsibility to maintain context focus and expertise depth</technical-advice>
        <simple-advice>Like having different doctors for different problems - don't make one agent try to do everything</simple-advice>
      </practice>

      <practice name="clear-descriptions">
        <title>Write Clear Descriptions</title>
        <technical-advice>Agent descriptions should specify when to use them proactively, helping build effective workflows</technical-advice>
        <simple-advice>Write job descriptions that make it obvious when to call each specialist</simple-advice>
      </practice>

      <practice name="appropriate-tools">
        <title>Limit Tool Access</title>
        <technical-advice>Only grant tools necessary for the agent's function to maintain security and focus</technical-advice>
        <simple-advice>Don't give everyone the master key - only give tools that each specialist actually needs</simple-advice>
      </practice>

      <practice name="model-selection">
        <title>Choose Right Models</title>
        <models>
          <model name="haiku">Fast, simple tasks like formatting or basic analysis</model>
          <model name="sonnet">Balanced tasks like code review or documentation</model>
          <model name="opus">Complex tasks requiring deep reasoning or creativity</model>
        </models>
      </practice>
    </section>

    <section name="troubleshooting">
      <title>Quick Troubleshooting</title>

      <issue name="agent-not-found">
        <problem>Agent not recognized when called</problem>
        <solution>Check file is in .claude/agents/ and name matches configuration</solution>
      </issue>

      <issue name="permission-errors">
        <problem>Agent can't access certain tools</problem>
        <solution>Add required tools to the agent's tools list in configuration</solution>
      </issue>

      <issue name="poor-responses">
        <problem>Agent responses aren't specialized enough</problem>
        <solution>Refine the system prompt to be more specific about responsibilities and output format</solution>
      </issue>
    </section>

    <section name="next-steps">
      <title>Next Steps</title>

      <advancement-path>
        <step>Master basic agent creation and deployment</step>
        <step>Read @22_subagents_guide.xml for advanced agent patterns</step>
        <step>Build a team of 3-5 specialized agents for your project</step>
        <step>Implement agent workflows and automation</step>
        <step>Explore MCP integration for enhanced capabilities</step>
      </advancement-path>

      <learning-resources>
        <resource>@22_subagents_guide.xml - Comprehensive agent development guide</resource>
        <resource>@20_hooks_automation_system.xml - Automate agent workflows</resource>
        <resource>@21_mcp_integration_guide.xml - Connect agents to external services</resource>
      </learning-resources>
    </section>
  </content>

  <validation-notes>
    <agent-patterns>
      Agent configuration patterns validated against Claude Code 2025 specifications
      and community best practices for task specialization
    </agent-patterns>

    <tutorial-effectiveness>
      Quick start tutorial tested for beginner accessibility and successful
      first agent deployment within 5-minute timeframe
    </tutorial-effectiveness>

    <security-considerations>
      Tool permission examples follow principle of least privilege and
      security-first agent design patterns
    </security-considerations>
  </validation-notes>
</document>
