<?xml version="1.0" encoding="UTF-8"?>
<agent-orchestration-plan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <metadata>
    <title>Sequential Agent Orchestration for Atomic Task Implementation</title>
    <version>1.0.0</version>
    <created>2025-01-12</created>
    <type>orchestration-specification</type>
    <domain>level-2-production</domain>
    <purpose>Comprehensive agent coordination for 52-task implementation with precise definitions of done</purpose>
  </metadata>

  <orchestration-philosophy>
    <technical-explanation>Sequential agent architecture with strict handoff protocols, validation gates, and rollback capabilities</technical-explanation>
    <simple-explanation>Like a factory assembly line where each specialist does their job perfectly before passing work to the next specialist</simple-explanation>
    <learning-value>This teaches distributed system coordination, quality assurance, and production reliability patterns</learning-value>
    <teaching-format>
      <technical>Technical: Sequential orchestration with explicit validation gates and rollback ensures deterministic behavior across agent boundaries.</technical>
      <simple>Simple: Think of it like a baton pass in a relay—each runner finishes their stretch cleanly before handing off so the team doesn’t drop the baton.</simple>
      <connection>Connection: This helps you learn how to structure multi-step AI workflows that are reliable, testable, and easy to recover when errors occur.</connection>
    </teaching-format>
  </orchestration-philosophy>

  <agent-roles>
    <agent id="audit-specialist">
      <name>System Audit Specialist</name>
      <responsibility>Comprehensive system analysis and validation</responsibility>
      <tools>Grep, Read, LS, Bash</tools>
      <expertise>File system analysis, dependency mapping, configuration validation</expertise>
      <handoff-criteria>Complete inventory with verification commands</handoff-criteria>
    </agent>

    <agent id="fix-implementer">
      <name>Critical Fix Implementer</name>
      <responsibility>Execute atomic fixes with safety protocols</responsibility>
      <tools>Edit, MultiEdit, Write, Bash</tools>
      <expertise>Safe file modification, backup creation, atomic operations</expertise>
      <handoff-criteria>All fixes validated, backups created, rollback tested</handoff-criteria>
    </agent>

    <agent id="structure-builder">
      <name>Directory Structure Builder</name>
      <responsibility>Create and validate directory hierarchies</responsibility>
      <tools>Bash, LS, Write</tools>
      <expertise>File system organization, permission management, template creation</expertise>
      <handoff-criteria>Complete directory structure with working templates</handoff-criteria>
    </agent>

    <agent id="config-manager">
      <name>Configuration Manager</name>
      <responsibility>Configuration file management and validation</responsibility>
      <tools>Read, Write, Edit, Bash</tools>
      <expertise>Configuration syntax, reference resolution, loading validation</expertise>
      <handoff-criteria>All configurations loadable and syntactically valid</handoff-criteria>
    </agent>

    <agent id="quality-validator">
      <name>Quality Validation Specialist</name>
      <responsibility>Comprehensive validation and quality gates</responsibility>
      <tools>Bash, Grep, Read, LS</tools>
      <expertise>System validation, quality metrics, production readiness assessment</expertise>
      <handoff-criteria>All quality gates passed, production readiness confirmed</handoff-criteria>
    </agent>

    <agent id="safety-coordinator">
      <name>Safety Coordination Specialist</name>
      <responsibility>Safety checks and rollback preparation</responsibility>
      <tools>Bash, Read, Write</tools>
      <expertise>Risk assessment, rollback procedures, safety validation</expertise>
      <handoff-criteria>All safety checks passed, rollback procedures tested</handoff-criteria>
    </agent>
  </agent-roles>

  <phase-1-orchestration>
    <phase-name>PRODUCTION READINESS - Critical Fixes</phase-name>
    <duration>45 minutes</duration>
    <objective>Transform system from 8.2/10 to 9.1/10 production readiness</objective>

    <sequence-1>
      <agent-assignment>audit-specialist</agent-assignment>
      <tasks>1.1: Tool Reference Audit</tasks>
      <detailed-instructions>
        <instruction>Execute comprehensive scan of all agent tool declarations using find and grep</instruction>
        <instruction>Create tool_audit.txt with complete inventory of tool usage</instruction>
        <instruction>Identify external tool references and catalog in external_tool_audit.txt</instruction>
        <instruction>Cross-reference against approved tool list (Read, Write, Edit, MultiEdit, Bash, Grep, LS, TodoWrite, mcp__*, Gemini CLI)</instruction>
        <instruction>Document any non-compliant tool references with file and line number</instruction>
      </detailed-instructions>
      <definition-of-done>
        <criterion>All 9 agents have tool declarations documented in audit files</criterion>
        <criterion>External tool references identified and catalogued completely</criterion>
        <criterion>No undocumented tool usage found in any agent</criterion>
        <criterion>Audit files created successfully with readable content</criterion>
        <criterion>Compliance percentage calculated and documented</criterion>
      </definition-of-done>
      <validation-commands>
        <command>wc -l tool_audit.txt external_tool_audit.txt</command>
        <command>grep -c "tools:" tool_audit.txt</command>
        <command>find .claude/level-2-production/agents -name "*.md" | wc -l</command>
      </validation-commands>
      <handoff-package>
        <deliverable>tool_audit.txt - complete tool inventory</deliverable>
        <deliverable>external_tool_audit.txt - external tool catalog</deliverable>
        <deliverable>compliance_report.txt - compliance assessment</deliverable>
      </handoff-package>
    </sequence-1>

    <sequence-2>
      <agent-assignment>fix-implementer</agent-assignment>
      <tasks>1.2-1.3: ElevenLabs Tool Reference Fix and Validation</tasks>
      <detailed-instructions>
        <instruction>Create backup of 09_audio_synthesizer.md with timestamp</instruction>
        <instruction>Use sed to replace text_to_speech with mcp__ElevenLabs__text_to_speech</instruction>
        <instruction>Verify replacement occurred exactly once</instruction>
        <instruction>Validate file syntax integrity remains intact</instruction>
        <instruction>Test file readability and YAML frontmatter validity</instruction>
        <instruction>Document change in modification log</instruction>
      </detailed-instructions>
      <definition-of-done>
        <criterion>Backup file created successfully with timestamp</criterion>
        <criterion>sed command executed without errors</criterion>
        <criterion>New tool reference matches exact MCP format specification</criterion>
        <criterion>No other content accidentally modified in file</criterion>
        <criterion>File remains readable and properly formatted</criterion>
        <criterion>grep confirms mcp__ElevenLabs__text_to_speech present</criterion>
        <criterion>grep confirms no remaining text_to_speech references</criterion>
      </definition-of-done>
      <validation-commands>
        <command>ls -la .claude/level-2-production/agents/09_audio_synthesizer.md*</command>
        <command>grep "mcp__ElevenLabs__text_to_speech" .claude/level-2-production/agents/09_audio_synthesizer.md</command>
        <command>grep -c "text_to_speech" .claude/level-2-production/agents/09_audio_synthesizer.md</command>
        <command>diff .claude/level-2-production/agents/09_audio_synthesizer.md.backup .claude/level-2-production/agents/09_audio_synthesizer.md</command>
      </validation-commands>
      <rollback-procedure>cp 09_audio_synthesizer.md.backup 09_audio_synthesizer.md</rollback-procedure>
      <handoff-package>
        <deliverable>Fixed 09_audio_synthesizer.md with correct MCP tool reference</deliverable>
        <deliverable>Backup file for rollback capability</deliverable>
        <deliverable>Validation confirmation report</deliverable>
      </handoff-package>
    </sequence-2>

    <sequence-3>
      <agent-assignment>structure-builder</agent-assignment>
      <tasks>1.4-1.6: Sessions Directory Creation and Testing</tasks>
      <detailed-instructions>
        <instruction>Create complete sessions directory hierarchy: active/, completed/, failed/, templates/, active/backups/</instruction>
        <instruction>Set proper permissions (755) on all directories</instruction>
        <instruction>Create session_template.json with all required fields</instruction>
        <instruction>Validate JSON syntax using python3 -c "import json; json.load(open('file'))"</instruction>
        <instruction>Test write/read operations in all directories</instruction>
        <instruction>Create test file, verify content, then clean up</instruction>
        <instruction>Document directory structure for future reference</instruction>
      </detailed-instructions>
      <definition-of-done>
        <criterion>All directories created successfully with proper hierarchy</criterion>
        <criterion>Proper permissions (755) confirmed on all directories</criterion>
        <criterion>Write access confirmed in each directory via test operations</criterion>
        <criterion>No existing files overwritten during creation</criterion>
        <criterion>Directory structure matches design specification exactly</criterion>
        <criterion>session_template.json created with valid JSON syntax</criterion>
        <criterion>All required template fields present and properly formatted</criterion>
        <criterion>Test file operations succeed without errors</criterion>
        <criterion>No lingering test files after cleanup</criterion>
      </definition-of-done>
      <validation-commands>
        <command>find .claude/level-2-production/sessions -type d | sort</command>
        <command>ls -la .claude/level-2-production/sessions/</command>
        <command>python3 -c "import json; print('Valid JSON:', json.load(open('.claude/level-2-production/sessions/templates/session_template.json')))"</command>
        <command><![CDATA[touch .claude/level-2-production/sessions/active/test.tmp && rm .claude/level-2-production/sessions/active/test.tmp]]></command>
      </validation-commands>
      <handoff-package>
        <deliverable>Complete sessions directory structure</deliverable>
        <deliverable>Valid session_template.json</deliverable>
        <deliverable>Directory validation report</deliverable>
      </handoff-package>
    </sequence-3>

    <sequence-4>
      <agent-assignment>config-manager</agent-assignment>
      <tasks>1.7-1.10: Configuration File Audit and Resolution</tasks>
      <detailed-instructions>
        <instruction>Scan all agent files for configuration file references using grep patterns</instruction>
        <instruction>Extract all .claude/*.yaml, .claude/*.json, .claude/*.config references</instruction>
        <instruction>Check existence of each referenced configuration file</instruction>
        <instruction>For missing files: determine if file needed or reference should be removed</instruction>
        <instruction>Create minimal configuration files for legitimate missing references</instruction>
        <instruction>Test configuration loading from each agent context</instruction>
        <instruction>Validate all configuration syntax and structure</instruction>
      </detailed-instructions>
      <definition-of-done>
        <criterion>All configuration file references documented in audit</criterion>
        <criterion>Missing configuration files identified with impact assessment</criterion>
        <criterion>All legitimate missing files created with valid syntax</criterion>
        <criterion>Invalid references removed or corrected</criterion>
        <criterion>Configuration loading tested successfully from agent contexts</criterion>
        <criterion>All configuration files have valid syntax (JSON/YAML)</criterion>
        <criterion>No broken configuration references remain in any agent</criterion>
      </definition-of-done>
      <validation-commands>
        <command>find .claude -name "*.yaml" -o -name "*.json" -o -name "*.config" | sort</command>
        <command>grep -r "\.claude.*\.\(yaml\|json\|config\)" .claude/level-2-production/agents/</command>
        <command>python3 -c "import json; [json.load(open(f)) for f in []]" # Test JSON files</command>
      </validation-commands>
      <handoff-package>
        <deliverable>Configuration audit report</deliverable>
        <deliverable>All required configuration files</deliverable>
        <deliverable>Configuration validation confirmations</deliverable>
      </handoff-package>
    </sequence-4>

    <sequence-5>
      <agent-assignment>quality-validator</agent-assignment>
      <tasks>1.11: Production Readiness Validation</tasks>
      <detailed-instructions>
        <instruction>Execute comprehensive production readiness checklist</instruction>
        <instruction>Validate all blocking issues have been resolved</instruction>
        <instruction>Test single episode production flow end-to-end (simulation)</instruction>
        <instruction>Verify 30-minute production time target achievability</instruction>
        <instruction>Confirm $7-8 cost target maintainable</instruction>
        <instruction>Validate all quality gates are functional</instruction>
        <instruction>Calculate final production readiness score</instruction>
        <instruction>Document any remaining risks or limitations</instruction>
      </detailed-instructions>
      <definition-of-done>
        <criterion>All critical blocking issues confirmed resolved</criterion>
        <criterion>Single episode production flow validated (simulation)</criterion>
        <criterion>30-minute production time target confirmed achievable</criterion>
        <criterion>$7-8 cost target confirmed maintainable</criterion>
        <criterion>All quality gates confirmed functional</criterion>
        <criterion>Production readiness score ≥9.1/10 achieved</criterion>
        <criterion>Risk assessment completed with mitigation strategies</criterion>
        <criterion>Production readiness certification document created</criterion>
      </definition-of-done>
      <validation-commands>
        <command>echo "Production Readiness Validation Complete"</command>
        <command>ls -la .claude/level-2-production/sessions/templates/</command>
        <command>grep "mcp__ElevenLabs__text_to_speech" .claude/level-2-production/agents/09_audio_synthesizer.md</command>
      </validation-commands>
      <handoff-package>
        <deliverable>Production readiness certification</deliverable>
        <deliverable>Final validation report</deliverable>
        <deliverable>Risk assessment and mitigation plan</deliverable>
      </handoff-package>
    </sequence-5>

    <sequence-6>
      <agent-assignment>safety-coordinator</agent-assignment>
      <tasks>1.12: Atomic Commit and Safety Validation</tasks>
      <detailed-instructions>
        <instruction>Run comprehensive safety validation matrix</instruction>
        <instruction>Verify no breaking changes to existing working components</instruction>
        <instruction>Ensure all file paths use absolute references</instruction>
        <instruction>Validate all bash commands are safe and tested</instruction>
        <instruction>Check for circular dependencies in agent handoffs</instruction>
        <instruction>Verify session state can recover from interruptions</instruction>
        <instruction>Create atomic commit with comprehensive message</instruction>
        <instruction>Document Phase 1 completion with metrics</instruction>
      </detailed-instructions>
      <definition-of-done>
        <criterion>All 5 critical safety checks passed without issues</criterion>
        <criterion>No breaking changes introduced to existing functionality</criterion>
        <criterion>All file paths confirmed absolute and resolvable</criterion>
        <criterion>All bash commands validated as safe and tested</criterion>
        <criterion>No circular dependencies detected in agent handoff flow</criterion>
        <criterion>Session state recovery capability confirmed</criterion>
        <criterion>Atomic commit created with comprehensive documentation</criterion>
        <criterion>Phase 1 completion metrics documented</criterion>
      </definition-of-done>
      <validation-commands>
        <command>git status</command>
        <command>git add .</command>
        <command>git commit -m "feat: Phase 1 production readiness - critical fixes complete"</command>
      </validation-commands>
      <handoff-package>
        <deliverable>Safety validation certification</deliverable>
        <deliverable>Atomic commit with Phase 1 changes</deliverable>
        <deliverable>Phase 1 completion metrics report</deliverable>
      </handoff-package>
    </sequence-6>
  </phase-1-orchestration>

  <orchestration-controls>
    <coordination-protocols>
      <protocol>Each agent must complete ALL tasks before handoff</protocol>
      <protocol>Validation commands must pass 100% before proceeding</protocol>
      <protocol>Definition of done criteria are mandatory, no exceptions</protocol>
      <protocol>Handoff packages must be complete and verified</protocol>
      <protocol>Rollback procedures must be tested before major changes</protocol>
    </coordination-protocols>

    <quality-gates>
      <gate>Pre-execution: Validate agent has required tools and access</gate>
      <gate>Mid-execution: Confirm intermediate steps are progressing correctly</gate>
      <gate>Post-execution: Verify all definition-of-done criteria met</gate>
      <gate>Handoff: Validate deliverable packages are complete and correct</gate>
    </quality-gates>

    <failure-handling>
      <principle>Stop immediately on any validation failure</principle>
      <principle>Execute rollback procedures if safe to do so</principle>
      <principle>Escalate to human oversight for complex failures</principle>
      <principle>Document all failure scenarios for future prevention</principle>
    </failure-handling>
  </orchestration-controls>

  <success-metrics>
    <phase-1-success>
      <metric>All 12 Phase 1 tasks completed successfully</metric>
      <metric>Production readiness score ≥9.1/10 achieved</metric>
      <metric>All blocking issues resolved and validated</metric>
      <metric>Single episode production capability confirmed</metric>
      <metric>45-minute target completion time met</metric>
      <metric>Zero critical safety violations</metric>
    </phase-1-success>
  </success-metrics>

  <next-phase-preparation>
    <phase-2-readiness>
      <requirement>Phase 1 safety coordinator sign-off required</requirement>
      <requirement>Production readiness certification must be ≥9.1/10</requirement>
      <requirement>All rollback procedures must be tested and documented</requirement>
      <requirement>Agent handoff protocols validated through Phase 1 execution</requirement>
    </phase-2-readiness>
  </next-phase-preparation>
</agent-orchestration-plan>
