# Quality Gates Configuration for Nobody Knows Podcast Production
# Version: 3.0.0 - CENTRALIZED CONFIGURATION
# Last Updated: 2025-01-15
# Purpose: Define quality thresholds and evaluation criteria for multi-agent production pipeline
#
# CONFIGURATION CENTRALIZATION:
# This file now uses CONFIG references from production-config.yaml (Single Source of Truth)
# All ${CONFIG_*} variables are loaded by config-loader.sh
# CRITICAL: Source config-loader.sh before using this file

quality_gates:
  # Core quality thresholds (0.0 - 1.0 scale)
  thresholds:
    comprehension:
      minimum: ${CONFIG_QUALITY_COMPREHENSION_MIN}  # From master config
      target: ${CONFIG_QUALITY_COMPREHENSION_TARGET}    # From master config
      description: "General audience understanding without prior technical knowledge"
      weight: ${CONFIG_WEIGHT_COMPREHENSION}

    brand_consistency:
      minimum: ${CONFIG_QUALITY_BRAND_MIN}        # From master config
      target: ${CONFIG_QUALITY_BRAND_TARGET}          # From master config
      description: "Alignment with Nobody Knows brand voice and philosophy"
      weight: ${CONFIG_WEIGHT_BRAND}

    engagement:
      minimum: ${CONFIG_QUALITY_ENGAGEMENT_MIN}      # From master config
      target: ${CONFIG_QUALITY_ENGAGEMENT_TARGET}        # From master config
      description: "Ability to maintain listener interest for full ${CONFIG_EPISODE_DURATION_TARGET} minutes"  # From master config
      weight: ${CONFIG_WEIGHT_ENGAGEMENT}

    technical_accuracy:
      minimum: ${CONFIG_QUALITY_TECHNICAL_MIN}      # From master config
      target: ${CONFIG_QUALITY_TECHNICAL_TARGET}        # From master config
      description: "Factual correctness and proper technical explanations"
      weight: ${CONFIG_WEIGHT_TECHNICAL}

  # Brand voice requirements
  brand_metrics:
    intellectual_humility:
      minimum_per_episode: ${CONFIG_BRAND_HUMILITY_MIN}    # From master config
      target_per_episode: ${CONFIG_BRAND_HUMILITY_TARGET}      # From master config
      examples:
        - "Nobody fully understands..."
        - "We're still learning..."
        - "Scientists are debating..."
        - "This might be wrong, but..."
        - "The honest answer is we don't know..."

    question_density:
      minimum_per_1000_words: ${CONFIG_BRAND_QUESTIONS_MIN}  # From master config
      target_per_1000_words: ${CONFIG_BRAND_QUESTIONS_TARGET}    # From master config
      types:
        - curiosity_prompts: "What if...?"
        - technical_questions: "How does this actually work?"
        - philosophical: "What does this mean for...?"
        - engagement: "Have you ever wondered...?"

    feynman_analogies:
      minimum_per_episode: ${CONFIG_BRAND_ANALOGIES_MIN}    # From master config
      target_per_episode: ${CONFIG_BRAND_ANALOGIES_TARGET}      # From master config
      quality_criteria:
        - uses_everyday_objects: true
        - builds_progressively: true
        - avoids_nested_complexity: true

    fridman_curiosity:
      minimum_expressions: ${CONFIG_BRAND_FRIDMAN_MIN}
      target_expressions: ${CONFIG_BRAND_FRIDMAN_TARGET}
      markers:
        - "fascinating"
        - "really interesting"
        - "makes you wonder"
        - "deeply curious about"

  # Episode structure requirements
  structure:
    duration:
      target_minutes: ${CONFIG_EPISODE_DURATION_TARGET}  # From master config (CORRECTED)
      tolerance_minutes: ${CONFIG_EPISODE_TOLERANCE}
      word_count_target: ${CONFIG_EPISODE_WORDS_TARGET}    # From master config (CORRECTED)
      word_count_range: [${CONFIG_EPISODE_WORDS_MIN}, ${CONFIG_EPISODE_WORDS_MAX}]  # From master config

    segments:
      introduction:
        duration_range: [${CONFIG_INTRO_MIN}, ${CONFIG_INTRO_MAX}]
        required_elements:
          - hook
          - thesis_statement
          - episode_preview

      body:
        duration_range: [${CONFIG_BODY_MIN}, ${CONFIG_BODY_MAX}]
        required_elements:
          - foundation_concepts
          - progressive_complexity
          - practical_examples
          - intellectual_humility_moments

      conclusion:
        duration_range: [${CONFIG_CONCLUSION_MIN}, ${CONFIG_CONCLUSION_MAX}]
        required_elements:
          - key_takeaways
          - curiosity_prompt
          - next_episode_tease

  # Multi-model evaluation consensus
  evaluation_consensus:
    agreement_threshold: ${CONFIG_QUALITY_AGREEMENT_THRESHOLD}  # Maximum acceptable score difference from master config
    conflict_resolution:
      - strategy: "average"
        when: "difference < minor_threshold"
      - strategy: "conservative"
        when: "difference >= minor_threshold and < major_threshold"
        action: "use_lower_score"
      - strategy: "escalate"
        when: "difference >= major_threshold"
        action: "human_review"

    model_weights:
      claude: ${CONFIG_QUALITY_CLAUDE_WEIGHT}  # Slightly favor Claude for nuanced evaluation (from master config)
      gemini: ${CONFIG_QUALITY_GEMINI_WEIGHT}  # Gemini for factual verification (from master config)

  # Revision thresholds
  revision_triggers:
    minor_revision:
      when: "1-2 gates fail by small margin"
      max_time_minutes: ${CONFIG_MINOR_REVISION_TIME}
      max_attempts: ${CONFIG_MINOR_REVISION_ATTEMPTS}

    major_revision:
      when: "3+ gates fail OR any gate fails by significant margin"
      max_time_minutes: ${CONFIG_MAJOR_REVISION_TIME}
      max_attempts: ${CONFIG_MAJOR_REVISION_ATTEMPTS}

    complete_rewrite:
      when: "any score below critical threshold OR technical_accuracy below minimum"
      action: "restart_from_planning"
      requires_approval: true

  # Cost controls
  cost_limits:
    per_episode_maximum: ${CONFIG_COST_PER_EPISODE_MAXIMUM}  # From master config
    per_episode_target: ${CONFIG_COST_PER_EPISODE_TARGET}     # From master config (CORRECTED)
    revision_budget: ${CONFIG_COST_REVISION_BUDGET}  # From master config
    alert_threshold: ${CONFIG_COST_ALERT_THRESHOLD}           # From master config

    agent_budgets:
      01_research_coordinator: ${CONFIG_COST_RESEARCH}
      02_episode_planner: ${CONFIG_COST_PLANNER}
      03_script_writer: ${CONFIG_COST_SCRIPT}
      04_quality_claude: ${CONFIG_COST_QUALITY_CLAUDE}
      05_quality_gemini: ${CONFIG_COST_QUALITY_GEMINI}  # FREE tier from master config
      06_feedback_synthesizer: ${CONFIG_COST_FEEDBACK}
      07_script_polisher: ${CONFIG_COST_POLISHER}
      08_final_reviewer: ${CONFIG_COST_REVIEWER}
      09_audio_synthesizer: ${CONFIG_COST_AUDIO}

  # Progressive complexity by season
  complexity_progression:
    season_1:
      episodes: [${CONFIG_SEASON1_START}, ${CONFIG_SEASON1_END}]
      complexity_range: [${CONFIG_SEASON1_COMPLEXITY_MIN}, ${CONFIG_SEASON1_COMPLEXITY_MAX}]
      focus: "fundamental_concepts"

    season_2:
      episodes: [${CONFIG_SEASON2_START}, ${CONFIG_SEASON2_END}]
      complexity_range: [${CONFIG_SEASON2_COMPLEXITY_MIN}, ${CONFIG_SEASON2_COMPLEXITY_MAX}]
      focus: "building_understanding"

    season_3:
      episodes: [${CONFIG_SEASON3_START}, ${CONFIG_SEASON3_END}]
      complexity_range: [${CONFIG_SEASON3_COMPLEXITY_MIN}, ${CONFIG_SEASON3_COMPLEXITY_MAX}]
      focus: "technical_depth"

    season_4:
      episodes: [${CONFIG_SEASON4_START}, ${CONFIG_SEASON4_END}]
      complexity_range: [${CONFIG_SEASON4_COMPLEXITY_MIN}, ${CONFIG_SEASON4_COMPLEXITY_MAX}]
      focus: "cutting_edge_research"

    season_5:
      episodes: [${CONFIG_SEASON5_START}, ${CONFIG_SEASON5_END}]
      complexity_range: [${CONFIG_SEASON5_COMPLEXITY_MIN}, ${CONFIG_SEASON5_COMPLEXITY_MAX}]
      focus: "philosophical_implications"

  # Failure handling
  failure_policies:
    max_total_attempts: ${CONFIG_MAX_TOTAL_ATTEMPTS}
    timeout_minutes: ${CONFIG_TIMEOUT_MINUTES}

    escalation_path:
      - level: 1
        after_attempts: ${CONFIG_ESCALATION_L1_ATTEMPTS}
        action: "increase_model_tier"
      - level: 2
        after_attempts: ${CONFIG_ESCALATION_L2_ATTEMPTS}
        action: "alert_user"
      - level: 3
        after_attempts: ${CONFIG_ESCALATION_L3_ATTEMPTS}
        action: "halt_pipeline"

    recovery_strategies:
      timeout: "save_progress_and_resume"
      quality_failure: "detailed_diagnostic_report"
      cost_overrun: "immediate_halt"
      api_error: "exponential_backoff"

  # Monitoring and metrics
  tracking:
    metrics_to_collect:
      - gate_pass_rates
      - revision_frequency
      - cost_per_episode
      - time_per_episode
      - quality_trend
      - brand_consistency_trend

    reporting:
      frequency: "after_each_episode"
      aggregate_reports: "weekly"
      quality_dashboard: true
      cost_dashboard: true

# Validation rules for this configuration
validation:
  all_thresholds_sum_to_1: true
  minimum_thresholds_below_targets: true
  cost_budgets_within_maximum: true
  complexity_ranges_progressive: true
