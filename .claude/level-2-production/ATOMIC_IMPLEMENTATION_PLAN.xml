<?xml version="1.0" encoding="UTF-8"?>
<atomic-implementation-plan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <metadata>
    <title>Atomic Implementation Plan with Quality Gates</title>
    <version>1.0.0</version>
    <created>2025-01-12</created>
    <type>implementation-specification</type>
    <domain>level-2-production</domain>
    <purpose>Systematic atomic task breakdown with failure prevention and validation</purpose>
  </metadata>

  <overview>
    <technical-description>Systematic atomic task breakdown with failure prevention, rollback capabilities, and comprehensive validation at each step</technical-description>
    <simple-explanation>Like building with safety checks at every step - if something breaks, we know exactly where and can fix it immediately</simple-explanation>
    <quality-gate-philosophy>Every task must pass ALL validation checks before proceeding. No exceptions.</quality-gate-philosophy>
  </overview>

  <phase id="1">
    <name>PRODUCTION READINESS</name>
    <target-duration>45 minutes</target-duration>
    <goal>System score 8.2/10 â†’ 9.1/10</goal>
    <success-criteria>All blocking issues resolved, single episode production functional</success-criteria>

    <task id="1.1">
      <name>Audit Current Tool References</name>
      <duration>5 minutes</duration>
      <atomic-action>Comprehensive scan of all agent tool declarations</atomic-action>
      <quality-gate>Complete inventory with no missed references</quality-gate>

      <implementation>
        <command>find .claude/level-2-production/agents -name "*.md" -exec grep -H "tools:" {} \; > tool_audit.txt</command>
        <command>grep -r "mcp__\|text_to_speech\|perplexity" .claude/level-2-production/agents/ > external_tool_audit.txt</command>
      </implementation>

      <validation-checklist>
        <check>All 9 agents have tool declarations documented</check>
        <check>External tool references identified and catalogued</check>
        <check>No undocumented tool usage found</check>
        <check>Audit files created successfully</check>
      </validation-checklist>

      <failure-scenarios>
        <risk>Missing tool declarations</risk>
        <detection>Empty results in audit</detection>
        <prevention>Manual verification of each agent file</prevention>
        <rollback>N/A (read-only operation)</rollback>
      </failure-scenarios>

      <commit-message>audit: comprehensive tool reference inventory</commit-message>
    </task>

    <task id="1.2">
      <name>Fix ElevenLabs Tool Reference</name>
      <duration>5 minutes</duration>
      <atomic-action>Update incorrect tool reference in audio synthesizer</atomic-action>
      <quality-gate>Exact tool name matches MCP specification</quality-gate>

      <implementation>
        <command>cp .claude/level-2-production/agents/09_audio_synthesizer.md .claude/level-2-production/agents/09_audio_synthesizer.md.backup</command>
        <command>sed -i 's/\[text_to_speech,/\[mcp__ElevenLabs__text_to_speech,/' .claude/level-2-production/agents/09_audio_synthesizer.md</command>
      </implementation>

      <validation-checklist>
        <check>Backup file created successfully</check>
        <check>sed command executed without errors</check>
        <check>New tool reference matches exact MCP format</check>
        <check>No other content accidentally modified</check>
        <check>File still readable and properly formatted</check>
      </validation-checklist>

      <failure-scenarios>
        <risk>sed corrupts file</risk>
        <detection>File comparison with backup</detection>
        <prevention>Test sed command on copy first</prevention>
        <rollback>cp 09_audio_synthesizer.md.backup 09_audio_synthesizer.md</rollback>
      </failure-scenarios>

      <commit-message>fix: correct ElevenLabs MCP tool reference in audio synthesizer</commit-message>
    </task>

    <task id="1.3">
      <name>Validate Tool Reference Fix</name>
      <duration>3 minutes</duration>
      <atomic-action>Verify fix was applied correctly</atomic-action>
      <quality-gate>Tool reference matches specification exactly</quality-gate>

      <verification-commands>
        <command>grep "mcp__ElevenLabs__text_to_speech" .claude/level-2-production/agents/09_audio_synthesizer.md</command>
        <command>grep -c "text_to_speech" .claude/level-2-production/agents/09_audio_synthesizer.md</command>
        <command>diff .claude/level-2-production/agents/09_audio_synthesizer.md.backup .claude/level-2-production/agents/09_audio_synthesizer.md</command>
      </verification-commands>

      <validation-checklist>
        <check>mcp__ElevenLabs__text_to_speech found in file</check>
        <check>No remaining text_to_speech references</check>
        <check>Only expected differences in diff output</check>
        <check>File syntax still valid (no broken YAML frontmatter)</check>
      </validation-checklist>

      <failure-scenarios>
        <risk>Multiple unintended changes</risk>
        <detection>Unexpected diff output</detection>
        <prevention>Manual review of all changes</prevention>
        <rollback>Restore from backup</rollback>
      </failure-scenarios>
    </task>

    <task id="1.4">
      <name>Create Sessions Directory Structure</name>
      <duration>8 minutes</duration>
      <atomic-action>Create missing directory hierarchy with proper templates</atomic-action>
      <quality-gate>Full directory structure with write permissions</quality-gate>

      <implementation>
        <command>mkdir -p .claude/level-2-production/sessions/{active,completed,failed,templates}</command>
        <command>mkdir -p .claude/level-2-production/sessions/active/backups</command>
      </implementation>

      <validation-checklist>
        <check>All directories created successfully</check>
        <check>Proper permissions (755) on directories</check>
        <check>Write access confirmed in each directory</check>
        <check>No existing files overwritten</check>
        <check>Directory structure matches design spec</check>
      </validation-checklist>

      <failure-scenarios>
        <risk>Permission denied</risk>
        <detection>mkdir returns error</detection>
        <prevention>Check parent directory permissions first</prevention>
        <rollback>rm -rf .claude/level-2-production/sessions</rollback>
      </failure-scenarios>

      <commit-message>feat: create sessions directory structure for state management</commit-message>
    </task>

    <task id="1.5">
      <name>Create Session Template Files</name>
      <duration>10 minutes</duration>
      <atomic-action>Create JSON templates for each agent handoff type</atomic-action>
      <quality-gate>Valid JSON templates with all required fields</quality-gate>

      <template-content>
        <![CDATA[
{
  "session_id": "ep_{number}_{YYYYMMDD}_{HHMM}",
  "episode_number": null,
  "status": "pending",
  "created_at": null,
  "updated_at": null,
  "current_agent": null,
  "pipeline_stage": null,
  "costs": {
    "total": 0.00,
    "by_agent": {}
  },
  "quality_scores": {},
  "error_log": [],
  "recovery_state": null
}
        ]]>
      </template-content>

      <validation-checklist>
        <check>Template file created successfully</check>
        <check>JSON syntax is valid (python validation passes)</check>
        <check>All required fields present</check>
        <check>Template follows session design specification</check>
        <check>File permissions are correct (644)</check>
      </validation-checklist>

      <failure-scenarios>
        <risk>Invalid JSON syntax</risk>
        <detection>Python JSON validation fails</detection>
        <prevention>Use heredoc to avoid shell escaping issues</prevention>
        <rollback>Delete invalid template file</rollback>
      </failure-scenarios>

      <commit-message>feat: add session state templates for pipeline coordination</commit-message>
    </task>

    <task id="1.6">
      <name>Test Session Directory Functionality</name>
      <duration>5 minutes</duration>
      <atomic-action>Verify read/write operations work correctly</atomic-action>
      <quality-gate>All file operations succeed without errors</quality-gate>

      <test-implementation>
        <command>TEST_SESSION="test_$(date +%s)"</command>
        <command>echo '{"test": true}' > ".claude/level-2-production/sessions/active/${TEST_SESSION}.json"</command>
        <command>cat ".claude/level-2-production/sessions/active/${TEST_SESSION}.json"</command>
        <command>rm ".claude/level-2-production/sessions/active/${TEST_SESSION}.json"</command>
      </test-implementation>

      <validation-checklist>
        <check>Test file created successfully</check>
        <check>File content readable and correct</check>
        <check>File deletion successful</check>
        <check>No permission errors</check>
        <check>No lingering test files</check>
      </validation-checklist>

      <failure-scenarios>
        <risk>Permission issues</risk>
        <detection>Write/read operations fail</detection>
        <prevention>Check directory permissions first</prevention>
        <rollback>Clean up any test files created</rollback>
      </failure-scenarios>
    </task>

    <remaining-tasks>
      <task id="1.7">Configuration File Reference Audit</task>
      <task id="1.8">Verify Configuration File Existence</task>
      <task id="1.9">Fix Missing Configuration Files</task>
      <task id="1.10">Test Configuration Loading</task>
      <task id="1.11">Production Readiness Validation</task>
      <task id="1.12">Create Atomic Commit for Phase 1</task>
    </remaining-tasks>
  </phase>

  <safety-validation-matrix>
    <critical-safety-checks>
      <check id="1">No Breaking Changes: Existing functionality still works</check>
      <check id="2">Absolute File Paths: No relative path issues</check>
      <check id="3">Safe Bash Commands: All commands tested and secure</check>
      <check id="4">No Circular Dependencies: Agent handoff flow is acyclic</check>
      <check id="5">Session Recovery: State can be restored after interruption</check>
    </critical-safety-checks>

    <validation-template>
      <![CDATA[
# Run after each major task
echo "=== SAFETY VALIDATION ==="
echo "1. Tool compliance check..."
find .claude/level-2-production/agents -name "*.md" -exec grep -H "tools:" {} \; | grep -v "mcp__\|Read\|Write\|Edit\|MultiEdit\|Bash\|Grep\|LS\|TodoWrite"
echo "2. File reference validation..."
find .claude/level-2-production -name "*.md" -exec grep -l "\\.claude/" {} \; | xargs -I {} bash -c 'echo "Checking {}"; grep -o "\\.claude/[^\"]*" {}'
echo "3. JSON validity check..."
find .claude/level-2-production -name "*.json" -exec python3 -c "import json; json.load(open('{}'))" \;
echo "=== END SAFETY VALIDATION ==="
      ]]>
    </validation-template>
  </safety-validation-matrix>

  <rollback-strategy>
    <principles>
      <principle>Every task that modifies files must include pre-modification backup</principle>
      <principle>Atomic operation (complete or fail)</principle>
      <principle>Immediate validation</principle>
      <principle>Clear rollback command</principle>
      <principle>Rollback testing procedure</principle>
    </principles>
    <guarantee>Any step can be safely undone without affecting other components</guarantee>
  </rollback-strategy>
</atomic-implementation-plan>
