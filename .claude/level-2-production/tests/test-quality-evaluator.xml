<?xml version="1.0" encoding="UTF-8"?>
<document type="test-spec" version="1.0.0">
  <metadata>
    <last-updated>2025-08-12</last-updated>
    <test-type>agent-validation</test-type>
    <agent-under-test>quality-evaluator</agent-under-test>
  </metadata>

  <quality-evaluator-agent-validation>
    <test-objective>
      <objectives>
        <objective>Validate that quality-evaluator agent references all centralized configurations correctly</objective>
        <objective>Implements quality gates from JSON accurately</objective>
        <objective>Validates brand voice metrics properly</objective>
        <objective>Checks audio optimization requirements</objective>
        <objective>Outputs to correct directory with proper format</objective>
      </objectives>
    </test-objective>

    <configuration-references-check status="VERIFIED">
      <files-referenced>
        <file status="verified">`.claude/shared/config/production-config.yaml`</file>
        <file status="verified">`projects/nobody-knows/config/quality_gates.json`</file>
        <file status="verified">`.claude/shared/brand/brand-voice-guide.md`</file>
        <file status="verified">`.claude/shared/frameworks/audio-optimization.md`</file>
        <file status="verified">`.claude/shared/frameworks/progressive-complexity.md`</file>
      </files-referenced>

      <verification-commands>
        <command>
          <description>Count configuration references</description>
          <bash>grep -c "shared/\|projects/nobody-knows" quality-evaluator.md</bash>
          <expected>5+ references</expected>
        </command>
      </verification-commands>
    </configuration-references-check>

    <quality-gate-implementation status="VERIFIED">
      <thresholds-from-quality-gates-json>
        <threshold metric="Comprehension" value="0.85" weight="0.25" status="verified"/>
        <threshold metric="Brand Consistency" value="0.90" weight="0.30" status="verified"/>
        <threshold metric="Engagement" value="0.80" weight="0.25" status="verified"/>
        <threshold metric="Technical" value="0.85" weight="0.20" status="verified"/>
        <threshold metric="Overall" value="0.85" minimum="true" status="verified"/>
      </thresholds-from-quality-gates-json>

      <metrics-tracked>
        <metric status="verified">Flesch reading ease (60-80)</metric>
        <metric status="verified">Flesch-Kincaid grade (8-12)</metric>
        <metric status="verified">Average sentence length (15-25)</metric>
        <metric status="verified">Humility phrases per 1000 words</metric>
        <metric status="verified">Questions per 1000 words</metric>
        <metric status="verified">Hook effectiveness</metric>
        <metric status="verified">Duration accuracy</metric>
      </metrics-tracked>
    </quality-gate-implementation>

    <brand-voice-validation status="VERIFIED">
      <metrics-from-brand-voice-guide>
        <metric name="Intellectual humility" target="5" minimum="3" unit="per 1000 words" status="verified"/>
        <metric name="Questions" target="4" minimum="2" unit="per 1000 words" status="verified"/>
        <metric name="Feynman-Fridman style balance" type="check" status="verified"/>
        <metric name="Forbidden language pattern detection" type="check" status="verified"/>
        <metric name="Emotional tone spectrum validation" type="check" status="verified"/>
      </metrics-from-brand-voice-guide>
    </brand-voice-validation>

    <audio-optimization-checks status="VERIFIED">
      <requirements-from-audio-optimization>
        <requirement status="verified">Numbers spelled out validation</requirement>
        <requirement status="verified">Abbreviations expanded check</requirement>
        <requirement status="verified">Forbidden elements detection</requirement>
        <requirement status="verified">SSML usage validation (max 3-4 per segment)</requirement>
        <requirement status="verified">Sentence length compliance (max 25 words)</requirement>
        <requirement status="verified">No visual references check</requirement>
      </requirements-from-audio-optimization>
    </audio-optimization-checks>

    <output-configuration status="VERIFIED">
      <directory-and-naming>
        <output-directory status="verified">`projects/nobody-knows/output/quality/`</output-directory>
        <naming-pattern status="verified">`ep{number}_quality_{date}.json`</naming-pattern>
        <format status="verified">JSON format with comprehensive metrics</format>
        <location-constraint status="verified">Not in `.claude` directory</location-constraint>
      </directory-and-naming>
    </output-configuration>

    <cost-optimization status="VERIFIED">
      <budget-compliance>
        <budget-maximum>$0.50</budget-maximum>
        <model>Haiku (cost-efficient)</model>
        <evaluation-time>&lt; 10 minutes</evaluation-time>
        <cost-tracking>in output</cost-tracking>
      </budget-compliance>
    </cost-optimization>

    <failure-handling status="VERIFIED">
      <specific-actions-for-failure-types>
        <failure-type name="Below comprehension" action="Specific sentence fixes" status="verified"/>
        <failure-type name="Below brand consistency" action="Phrase additions" status="verified"/>
        <failure-type name="Below engagement" action="Variety improvements" status="verified"/>
        <failure-type name="Below technical" action="Duration adjustments" status="verified"/>
      </specific-actions-for-failure-types>
    </failure-handling>

    <integration-protocol status="VERIFIED">
      <input-output-specifications>
        <input-specification status="verified">Input from script-writer defined</input-specification>
        <output-format status="verified">Output format specified (JSON)</output-format>
        <handoff-protocol status="verified">Handoff protocol documented</handoff-protocol>
        <pass-fail-determination status="verified">Pass/fail determination clear</pass-fail-determination>
      </input-output-specifications>
    </integration-protocol>

    <test-execution-plan>
      <step id="1" name="Configuration Verification">
        <command>grep -c "shared/" quality-evaluator.md</command>
        <expected>5+ references</expected>
      </step>

      <step id="2" name="Sample Validation Test">
        <test-steps>
          <test-step>Load sample script from `projects/nobody-knows/output/scripts/`</test-step>
          <test-step>Run quality evaluation</test-step>
          <test-step>Verify output location and format</test-step>
          <test-step>Check all metrics calculated correctly</test-step>
        </test-steps>
      </step>

      <step id="3" name="Failure Mode Test">
        <test-steps>
          <test-step>Create script with low brand consistency</test-step>
          <test-step>Verify specific feedback provided</test-step>
          <test-step>Check recommendations actionable</test-step>
          <test-step>Confirm retry protocol works</test-step>
        </test-steps>
      </step>
    </test-execution-plan>

    <expected-results>
      <result>Agent properly references all configurations</result>
      <result>Quality gates accurately implemented</result>
      <result>Brand voice metrics correctly calculated</result>
      <result>Audio optimization thoroughly checked</result>
      <result>Output in correct location with proper format</result>
      <result>Cost within budget constraints</result>
    </expected-results>

    <test-status>READY FOR EXECUTION</test-status>

    <test-summary>
      <summary>The quality-evaluator agent is properly configured with:</summary>
      <configuration-achievements>
        <achievement>All centralized configurations referenced</achievement>
        <achievement>No duplication of quality standards</achievement>
        <achievement>Comprehensive validation coverage</achievement>
        <achievement>Clear pass/fail criteria</achievement>
        <achievement>Actionable feedback generation</achievement>
      </configuration-achievements>
      <next-step>Create validation test script</next-step>
    </test-summary>
  </quality-evaluator-agent-validation>
</document>
