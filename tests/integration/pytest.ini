[pytest]
# Integration Test Configuration for Podcast Production Pipeline

# Test discovery
testpaths = tests/integration
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output configuration
addopts =
    -v
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --show-capture=no

# Markers for test categorization
markers =
    integration: Integration tests (full pipeline)
    cost_sensitive: Tests that involve API costs
    performance: Performance and benchmark tests
    state_management: State persistence tests
    error_scenario: Error handling and recovery tests
    quality_validation: Quality assessment tests
    slow: Tests that take longer than 30 seconds
    expensive: Tests that cost more than $1.00

# Async test configuration
asyncio_mode = auto

# Warning filters
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Minimum version requirements
minversion = 6.0

# Test timeout (prevent hanging tests)
timeout = 300

# Coverage configuration (if pytest-cov is installed)
# addopts = --cov=podcast_production --cov-report=html --cov-report=term-missing

# Logging configuration
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging
log_file = tests/integration/test_results/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test collection settings
# collect_ignore list removed due to pytest version incompatibility

# Test execution order
# Run fast tests first, then slow/expensive tests
# This allows for quick feedback during development
