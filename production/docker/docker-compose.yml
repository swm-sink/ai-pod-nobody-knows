version: '3.8'

services:
  # Main application
  podcast-app:
    build:
      context: ../../..
      dockerfile: production/docker/Dockerfile
    container_name: ai-podcast-production-app
    environment:
      - ENVIRONMENT=production
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=podcast_production
      - POSTGRES_USER=podcast_app
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - ../../../.env.production
    ports:
      - "8000:8000"
    volumes:
      - podcast_data:/app/data
      - podcast_logs:/app/production/logs
      - podcast_metrics:/app/production/metrics
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - podcast-network
    healthcheck:
      test: ["CMD", "python3", "production/health/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "5"

  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: ai-podcast-production-db
    environment:
      POSTGRES_DB: podcast_production
      POSTGRES_USER: podcast_app
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - podcast-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U podcast_app -d podcast_production"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "3"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ai-podcast-production-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - podcast-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"

  # Monitoring and health checks
  monitoring:
    build:
      context: ../../..
      dockerfile: production/docker/Dockerfile
    container_name: ai-podcast-production-monitor
    command: ["python3", "production/monitoring/monitor.py"]
    environment:
      - ENVIRONMENT=production
    env_file:
      - ../../../.env.production
    volumes:
      - podcast_logs:/app/production/logs
      - podcast_metrics:/app/production/metrics
    depends_on:
      - podcast-app
    networks:
      - podcast-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai-podcast-production-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@localhost
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - podcast-network
    profiles:
      - admin
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  podcast_data:
    driver: local
  podcast_logs:
    driver: local
  podcast_metrics:
    driver: local
  pgadmin_data:
    driver: local

networks:
  podcast-network:
    driver: bridge
